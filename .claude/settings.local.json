{
  "permissions": {
    "allow": [
      "WebFetch(domain:modao.cc)",
      "Bash(mkdir:*)",
      "Bash(npm init:*)",
      "Bash(npm install)",
      "Bash(npx prisma generate:*)",
      "Bash(npx prisma:*)",
      "Bash(sudo systemctl:*)",
      "Bash(docker:*)",
      "Bash(docker-compose:*)",
      "Bash(sudo apt-get:*)",
      "Bash(sudo apt-get install:*)",
      "Bash(sudo mysql:*)",
      "Bash(mysql:*)",
      "Bash(npm run build:*)",
      "Bash(npm install:*)",
      "Bash(npm start)",
      "Bash(npm run dev:*)",
      "Bash(curl:*)",
      "Bash(sudo ln:*)",
      "Bash(sudo rm:*)",
      "Bash(sudo nginx:*)",
      "Bash(sudo ufw:*)",
      "Bash(sudo mkdir:*)",
      "Bash(chmod:*)",
      "Bash(touch:*)",
      "Bash(sqlite3:*)",
      "Bash(python:*)",
      "Bash(apt:*)",
      "Bash(apt install:*)",
      "Bash(source:*)",
      "Bash(pip install:*)",
      "Bash(uvicorn:*)",
      "Bash(pip3 install:*)",
      "Bash(grep:*)",
      "Bash(sudo apt:*)",
      "Bash(sudo apt install:*)",
      "Bash(npx vite:*)",
      "Bash(nginx:*)",
      "Bash(systemctl:*)",
      "Bash(pkill:*)",
      "Bash(JWT_TOKEN=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI1IiwiZW1haWwiOiJ0ZXN0ZnJvbnRlbmRAZXhhbXBsZS5jb20iLCJtZW1iZXJzaGlwTGV2ZWwiOiJCQVNJQyIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU2ODA1OTYsImV4cCI6MTc1NTc2Njk5NiwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.ixPaX7Hi8fj6Tru9SzvKndtJFbtAJ0vrWGjDMdDxBIM\")",
      "Bash(__NEW_LINE__ curl -X GET \"http://localhost:3001/api/v1/auth/me\" -H \"Authorization: Bearer $JWT_TOKEN\" -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(npm test:*)",
      "Bash(npm run test:*)",
      "Bash(node:*)",
      "Bash(mv:*)",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport asyncio\nimport sys\nsys.path.append(''.'')\n\nfrom app.database import check_db_connection\nfrom app.config import settings\n\nasync def test_connection():\n    print(f''üîó Êï∞ÊçÆÂ∫ìURL: {settings.database_url}'')\n    \n    # ÊµãËØïÂü∫Á°ÄËøûÊé•\n    is_connected = await check_db_connection()\n    if is_connected:\n        print(''‚úÖ ‰∫§ÊòìÊúçÂä°Êï∞ÊçÆÂ∫ìËøûÊé•ÊàêÂäü'')\n    else:\n        print(''‚ùå ‰∫§ÊòìÊúçÂä°Êï∞ÊçÆÂ∫ìËøûÊé•Â§±Ë¥•'')\n        return\n    \n    # ÊµãËØïÊü•ËØ¢ÂäüËÉΩ\n    try:\n        from sqlalchemy import text\n        from app.database import AsyncSessionLocal\n        \n        async with AsyncSessionLocal() as session:\n            # ÊµãËØïÊü•ËØ¢Áî®Êà∑Ë°®\n            result = await session.execute(text(''SELECT COUNT(*) FROM users''))\n            user_count = result.scalar()\n            print(f''üë• Áî®Êà∑ÊÄªÊï∞: {user_count}'')\n            \n            if user_count > 0:\n                result = await session.execute(text(''SELECT username, email FROM users LIMIT 1''))\n                user = result.fetchone()\n                print(f''üë§ Áî®Êà∑Á§∫‰æã: {user[0]} ({user[1]})'')\n                print(''‚úÖ Êï∞ÊçÆÂ∫ìÁªü‰∏ÄÊàêÂäüÔºÅ‰∏§‰∏™ÊúçÂä°ÂèØ‰ª•ÁúãÂà∞Áõ∏ÂêåÁöÑÊï∞ÊçÆ'')\n            else:\n                print(''‚ÑπÔ∏è  Êï∞ÊçÆÂ∫ì‰∏∫Á©∫Ôºå‰ΩÜËøûÊé•ÊàêÂäü'')\n            \n    except Exception as e:\n        print(f''‚ùå Êï∞ÊçÆÂ∫ìÊü•ËØ¢Â§±Ë¥•: {e}'')\n\nasyncio.run(test_connection())\n\")",
      "Bash(lsof:*)",
      "Bash(kill:*)",
      "Bash(PYTHONPATH=/root/trademe/backend/trading-service uvicorn app.main:app --host 0.0.0.0 --port 8001 --reload)",
      "Bash(__NEW_LINE__ echo \"Trading Service JWT_SECRET:\")",
      "Bash(NEW_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3QiLCJtZW1iZXJzaGlwX2xldmVsIjoiYmFzaWMiLCJleHAiOjE3NTU3NTE2ODAuMzMzNDA2fQ.FdeY8pJ9_DNKvvhx6PxgGUN0IxbG76CH7fN8WurqNjU\")",
      "Bash(echo:*)",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3QiLCJtZW1iZXJzaGlwX2xldmVsIjoiYmFzaWMiLCJleHAiOjE3NTU3NTE2ODAuMzMzNDA2fQ.FdeY8pJ9_DNKvvhx6PxgGUN0IxbG76CH7fN8WurqNjU\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyX2lkIjoxLCJlbWFpbCI6InRlc3RAZXhhbXBsZS5jb20iLCJ1c2VybmFtZSI6InRlc3QiLCJtZW1iZXJzaGlwX2xldmVsIjoiYmFzaWMiLCJleHAiOjE3NTU3NTIxMDkuMjg5MTU2fQ.wXVcz9Ecx8_85BO5ICwMYzWqk1Aka8xkhzLkmaSqZcw\")",
      "Bash(npx ts-node:*)",
      "Bash(cp:*)",
      "Bash(cat:*)",
      "Bash(PUBLIC_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoiQkFTSUMiLCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU1NzQ1NjgxLCJleHAiOjE3NTU4MzIwODEsImF1ZCI6InRyYWRlbWUtYXBwIiwiaXNzIjoidHJhZGVtZS11c2VyLXNlcnZpY2UifQ.iS9_Hfu5-aL5z4QBdL8p0RDRzQvSLTI8dD_NGgvJCbo\")",
      "Bash(find:*)",
      "Bash(PUBLIC_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU3NTQyOTAsImV4cCI6MTc1NTg0MDY5MCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.lP1WwMkQO_MldXXv9qn1CaMwnm9GrlGd0FTwQEZvZnM\")",
      "Bash(export:*)",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMCIsImVtYWlsIjoidGVzdHVzZXIyMDI1QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoiQkFTSUMiLCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU1NzU3ODI3LCJleHAiOjE3NTU4NDQyMjcsImF1ZCI6InRyYWRlbWUtYXBwIiwiaXNzIjoidHJhZGVtZS11c2VyLXNlcnZpY2UifQ.3H69_Zw3TW2Wy-_6FcE653W3wJnkmJVtuFlP7iZKwbI\" curl -X GET http://localhost:3001/api/v1/auth/me -H \"Authorization: Bearer $TEST_JWT\")",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMCIsImVtYWlsIjoidGVzdHVzZXIyMDI1QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoiQkFTSUMiLCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU1NzU3ODI3LCJleHAiOjE3NTU4NDQyMjcsImF1ZCI6InRyYWRlbWUtYXBwIiwiaXNzIjoidHJhZGVtZS11c2VyLXNlcnZpY2UifQ.3H69_Zw3TW2Wy-_6FcE653W3wJnkmJVtuFlP7iZKwbI\" curl -X GET http://localhost:3001/api/v1/membership/limits -H \"Authorization: Bearer $TEST_JWT\")",
      "WebFetch(domain:i.postimg.cc)",
      "Bash(ufw:*)",
      "Bash(ss:*)",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiIxMCIsImVtYWlsIjoidGVzdHVzZXIyMDI1QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoiQkFTSUMiLCJ0eXBlIjoiYWNjZXNzIiwiaWF0IjoxNzU1NzU3ODI3LCJleHAiOjE3NTU4NDQyMjcsImF1ZCI6InRyYWRlbWUtYXBwIiwiaXNzIjoidHJhZGVtZS11c2VyLXNlcnZpY2UifQ.3H69_Zw3TW2Wy-_6FcE653W3wJnkmJVtuFlP7iZKwbI\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/trading\")",
      "Bash(timeout 5 curl -s \"http://43.167.252.120/\")",
      "Bash(git checkout:*)",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU3NzU4MjgsImV4cCI6MTc1NTg2MjIyOCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.pOV7U7Wz7flgBGAAWXTB3wU5grqOCxqjsf27pF0iZkw\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU3NzYxNDUsImV4cCI6MTc1NTg2MjU0NSwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.ZCPm0CtH6Ioa7l9dUW13Ojnk1Su2BSd111WOsOLkFpM\")",
      "Bash(NEW_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU3NzYzNTQsImV4cCI6MTc1NTg2Mjc1NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.n4YYbASlg1jJ1MxhDJZVcIzptXMNN_9BApjlOYyNCiQ\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/\" -c /tmp/cookies.txt)",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/backtest\")",
      "Bash(TEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU3NzYzNTQsImV4cCI6MTc1NTg2Mjc1NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.n4YYbASlg1jJ1MxhDJZVcIzptXMNN_9BApjlOYyNCiQ\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/strategy/1/live\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/health\" -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120/\" -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120:3001/health\" -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(timeout 10 curl -s \"http://43.167.252.120:8001/health\" -w \"\\nStatus: %{http_code}\\n\")",
      "Bash(timeout:*)",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4MzY5MzcsImV4cCI6MTc1NTkyMzMzNywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.jOFs7Xu-dpS41PD5IZjdn2d2nOc_j6WAt89sSKc3xuQ\")",
      "Bash(__NEW_LINE__ curl -X GET \"http://localhost:8001/api/v1/api-keys/\" )",
      "Bash(NEWEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NDIzMDMsImV4cCI6MTc1NTkyODcwMywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.pe6-L_SR_JyJnn-4_FSuy_AmWofqO7KajYgEGzKwve8\")",
      "Bash(LATEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NDI0MjYsImV4cCI6MTc1NTkyODgyNiwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.7O9dNsYtot04foC9nzIasK4O-DLfeLwr3WOmzYSNDxs\")",
      "Bash(sudo:*)",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NTg2MjQsImV4cCI6MTc1NTk0NTAyNCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.__BK5wtci3BOcKGJYdsvplTenHhRbbc_rDYw8xuMs3U\")",
      "Bash(LATEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NTk1NzQsImV4cCI6MTc1NTk0NTk3NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.EYy1bluTfVPZ4DXLZgH2HhGfW3Ne2yp_922ULK9Hbt8\")",
      "Bash(__NEW_LINE__ echo \"Testing MACD analysis...\")",
      "Bash(__NEW_LINE__ curl -X GET \"http://localhost:8001/api/v1/strategies/\" )",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NjIzMjksImV4cCI6MTc1NTk0ODcyOSwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.MHn0g9pLFNqiywdil6bDalXbzbOTSZonHzldac61ugQ\")",
      "Bash(__NEW_LINE__ echo -e \"\\n=== Ëé∑ÂèñÁªüËÆ°‰ø°ÊÅØ ===\")",
      "Bash(PUBLIC_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU4NTk1NzQsImV4cCI6MTc1NTk0NTk3NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.EYy1bluTfVPZ4DXLZgH2HhGfW3Ne2yp_922ULK9Hbt8\")",
      "Bash(VALID_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU5MTk0MzIsImV4cCI6MTc1NjAwNTgzMiwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.O9KBsnFDvXAc1BVuGmu9Cej_Buc6h7SMtdjkH4HFCAU\")",
      "Bash(ps:*)",
      "Bash(bash:*)",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\";'')\ntables = cursor.fetchall()\nprint(''Êï∞ÊçÆÂ∫ì‰∏≠ÁöÑË°®:'')\nfor table in tables:\n    print(f''- {table[0]}'')\nconn.close()\n\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU5NDQxNTMsImV4cCI6MTc1NjAzMDU1MywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.RECZUdjMnRfZYA4UNlcXPjiPqVKtHZVSqizHTE_THW8\")",
      "Bash(__NEW_LINE__ curl -X GET \"http://localhost:8001/api/v1/strategies/\" )",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áî®Êà∑ID=9ÁöÑÁ≠ñÁï•Êï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, name, description, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\nprint(f''Á≠ñÁï•ÊÄªÊï∞: {len(strategies)}'')\nfor strategy in strategies:\n    status = ''Ê¥ªË∑É'' if strategy[3] else ''ÈùûÊ¥ªË∑É''\n    print(f''ID: {strategy[0]}, ÂêçÁß∞: {strategy[1]}, Áä∂ÊÄÅ: {status}'')\n\nprint(''\\n=== Áî®Êà∑ID=9ÁöÑAPIÂØÜÈí•Êï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, name, exchange, is_active FROM api_keys WHERE user_id=9'')\napi_keys = cursor.fetchall()\nprint(f''APIÂØÜÈí•ÊÄªÊï∞: {len(api_keys)}'')\nfor key in api_keys:\n    status = ''Ê¥ªË∑É'' if key[3] else ''ÈùûÊ¥ªË∑É'' \n    print(f''ID: {key[0]}, ÂêçÁß∞: {key[1]}, ‰∫§ÊòìÊâÄ: {key[2]}, Áä∂ÊÄÅ: {status}'')\n\nprint(''\\n=== Ê¥ªË∑ÉÁ≠ñÁï•ÁªüËÆ° ==='')\ncursor.execute(''SELECT COUNT(*) FROM strategies WHERE user_id=9 AND is_active=1'')\nactive_strategies = cursor.fetchone()[0]\nprint(f''Ê¥ªË∑ÉÁ≠ñÁï•Êï∞Èáè: {active_strategies}'')\n\nprint(''\\n=== Ê¥ªË∑ÉAPIÂØÜÈí•ÁªüËÆ° ==='')\ncursor.execute(''SELECT COUNT(*) FROM api_keys WHERE user_id=9 AND is_active=1'') \nactive_keys = cursor.fetchone()[0]\nprint(f''Ê¥ªË∑ÉAPIÂØÜÈí•Êï∞Èáè: {active_keys}'')\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ echo \"=== ‰øÆÊîπÂêéÁöÑ‰ΩøÁî®ÁªüËÆ°APIÊµãËØï ===\")",
      "Bash(__NEW_LINE__ echo \"=== ÊúÄÁªà‰øÆÊ≠£ÂêéÁöÑ‰ΩøÁî®ÁªüËÆ°APIÊµãËØï ===\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áî®Êà∑ID=9ÁöÑËØ¶ÁªÜÁ≠ñÁï•Êï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, name, description, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nfor strategy in strategies:\n    name = strategy[1]\n    description = strategy[2] if strategy[2] else ''Êó†ÊèèËø∞''\n    status = ''Ê¥ªË∑É'' if strategy[3] else ''ÈùûÊ¥ªË∑É''\n    \n    # Âà§Êñ≠ÊòØÂê¶‰∏∫ÊåáÊ†á\n    is_indicator = (\n        ''ÊåáÊ†á'' in name or \n        ''RSI'' in name or \n        ''MACD'' in name or \n        ''MA'' in name or \n        ''KDJ'' in name or \n        ''BOLL'' in name or\n        ''ÊåáÊ†á'' in description\n    )\n    \n    # Âà§Êñ≠ÊòØÂê¶‰∏∫Á≠ñÁï•\n    is_strategy = (\n        not is_indicator and (\n            ''Á≠ñÁï•'' in name or \n            ''Á≠ñÁï•'' in description or \n            ''‰∫§Êòì'' in name\n        )\n    )\n    \n    type_str = ''ÊåáÊ†á'' if is_indicator else (''Á≠ñÁï•'' if is_strategy else ''Êú™ÂàÜÁ±ª'')\n    \n    print(f''ID: {strategy[0]}, ÂêçÁß∞: {name}, Á±ªÂûã: {type_str}, Áä∂ÊÄÅ: {status}'')\n    print(f''    ÊèèËø∞: {description}'')\n    print()\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# Ê∑ªÂä†RSIÊåáÊ†áÊï∞ÊçÆ\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, is_active, created_at, updated_at) \nVALUES (9, ''RSIÁõ∏ÂØπÂº∫Âº±ÊåáÊ†á'', ''RSIÊäÄÊúØÊåáÊ†áÔºåÁî®‰∫éÂà§Êñ≠Â∏ÇÂú∫Ë∂Ö‰π∞Ë∂ÖÂçñÁä∂ÊÄÅ'', \n        ''def rsi_indicator(data, period=14): pass'', \n        ''{\"\"period\"\": 14, \"\"overbought\"\": 70, \"\"oversold\"\": 30}'', \n        1, ''2025-08-23 10:20:00'', ''2025-08-23 10:20:00'')\n'''''')\n\n# Ê∑ªÂä†MACDÊåáÊ†áÊï∞ÊçÆ\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, is_active, created_at, updated_at) \nVALUES (9, ''MACDÊåáÊ†á'', ''MACDÊäÄÊúØÊåáÊ†áÔºåÁî®‰∫éË∂ãÂäøÂàÜÊûêÂíå‰ø°Âè∑ËØÜÂà´'', \n        ''def macd_indicator(data, fast=12, slow=26, signal=9): pass'', \n        ''{\"\"fast\"\": 12, \"\"slow\"\": 26, \"\"signal\"\": 9}'', \n        1, ''2025-08-23 10:20:00'', ''2025-08-23 10:20:00'')\n'''''')\n\nconn.commit()\nprint(''‚úÖ ÊàêÂäüÊ∑ªÂä†ÊåáÊ†áÊï∞ÊçÆÂà∞Êï∞ÊçÆÂ∫ì'')\n\n# È™åËØÅÊ∑ªÂä†ÁªìÊûú\ncursor.execute(''SELECT id, name, description FROM strategies WHERE user_id=9 AND name LIKE \"\"%ÊåáÊ†á%\"\"'')\nindicators = cursor.fetchall()\nprint(f''Áé∞Âú®Êúâ {len(indicators)} ‰∏™ÊåáÊ†á:'')\nfor indicator in indicators:\n    print(f''  - ID: {indicator[0]}, ÂêçÁß∞: {indicator[1]}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áî®Êà∑ID=9ÁöÑÁ≠ñÁï•ÂàÜÁ±ªÁªüËÆ° ==='')\ncursor.execute(''SELECT id, name, description, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nindicators = []\ntrade_strategies = []\nother = []\n\nfor strategy in strategies:\n    name = strategy[1]\n    description = strategy[2] if strategy[2] else ''''\n    is_active = strategy[3]\n    \n    # Âà§Êñ≠ÊòØÂê¶‰∏∫ÊåáÊ†á\n    if (''ÊåáÊ†á'' in name or ''RSI'' in name or ''MACD'' in name or ''MA'' in name or ''KDJ'' in name or ''BOLL'' in name or ''ÊåáÊ†á'' in description):\n        if is_active:\n            indicators.append(strategy)\n    # Âà§Êñ≠ÊòØÂê¶‰∏∫Á≠ñÁï•  \n    elif (''Á≠ñÁï•'' in name or ''Á≠ñÁï•'' in description or ''‰∫§Êòì'' in name):\n        if is_active:\n            trade_strategies.append(strategy)\n    else:\n        other.append(strategy)\n\nprint(f''Ê¥ªË∑ÉÊåáÊ†áÊï∞Èáè: {len(indicators)}'')\nfor ind in indicators:\n    print(f''  - {ind[1]}'')\n\nprint(f''\\nÊ¥ªË∑ÉÁ≠ñÁï•Êï∞Èáè: {len(trade_strategies)}'')  \nfor strat in trade_strategies:\n    print(f''  - {strat[1]}'')\n\nprint(f''\\nÂÖ∂‰ªñ/Êú™ÂàÜÁ±ªÊï∞Èáè: {len(other)}'')\n\nprint(f''\\nË¥¶Êà∑‰∏≠ÂøÉÂ∫îÊòæÁ§∫:'')\nprint(f''  - ÊåáÊ†áÊï∞Èáè: {len(indicators)}/5'')\nprint(f''  - Á≠ñÁï•Êï∞Èáè: {len(trade_strategies)}/5'')\nprint(f''  - ÂÆûÁõò‰∫§Êòì: {min(3, len(trade_strategies))}/5'')\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ echo \"=== SQL‰øÆÊ≠£ÂêéÁöÑ‰ΩøÁî®ÁªüËÆ°APIÊµãËØï ===\")",
      "Bash(__NEW_LINE__ echo \"=== È™åËØÅÁ≠ñÁï•APIËøîÂõûÁöÑÂÆåÊï¥Êï∞ÊçÆ ===\")",
      "Read(//etc/nginx/sites-available/**)",
      "Read(//var/log/nginx/**)",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áî®Êà∑ID=9ÁöÑÂÆåÊï¥Êï∞ÊçÆÂàÜÊûê ==='')\n\nprint(''\\n1. Á≠ñÁï•Êï∞ÊçÆÔºàAIÁîüÊàêÁöÑÁ≠ñÁï•Ôºâ:'')\ncursor.execute(''SELECT id, name, description, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nai_strategies = []\nai_indicators = []\n\nfor strategy in strategies:\n    name = strategy[1]\n    description = strategy[2] if strategy[2] else ''''\n    is_active = strategy[3]\n    status = ''Ê¥ªË∑É'' if is_active else ''ÈùûÊ¥ªË∑É''\n    \n    if (''ÊåáÊ†á'' in name or ''RSI'' in name or ''MACD'' in name):\n        ai_indicators.append(strategy)\n        print(f''  ÊåáÊ†á: ID {strategy[0]}, {name}, Áä∂ÊÄÅ: {status}'')\n    else:\n        ai_strategies.append(strategy)\n        print(f''  Á≠ñÁï•: ID {strategy[0]}, {name}, Áä∂ÊÄÅ: {status}'')\n\nprint(f''\\nÁ≠ñÁï•ÊÄªÊï∞: {len(ai_strategies)} ‰∏™ÔºàAIÁîüÊàêÁöÑ‰∫§ÊòìÁ≠ñÁï•Ôºâ'')\nprint(f''ÊåáÊ†áÊÄªÊï∞: {len(ai_indicators)} ‰∏™ÔºàAIÁîüÊàêÁöÑÊäÄÊúØÊåáÊ†áÔºâ'')\n\nprint(''\\n2. ÂÆûÁõò‰∫§ÊòìÊï∞ÊçÆ:'')\n# Ê£ÄÊü•ÊòØÂê¶Êúâ‰∏ìÈó®ÁöÑÂÆûÁõò‰∫§ÊòìË°®\ncursor.execute(\"\"SELECT name FROM sqlite_master WHERE type=''table'' AND name LIKE ''%live%'';\"\")\nlive_tables = cursor.fetchall()\n\nif live_tables:\n    print(''  ÊâæÂà∞ÂÆûÁõò‰∫§ÊòìË°®:'', [table[0] for table in live_tables])\n    # Â¶ÇÊûúÊúâ‰∏ìÈó®ÁöÑÂÆûÁõò‰∫§ÊòìË°®ÔºåÊü•ËØ¢ÂÆûÁõòÊï∞ÊçÆ\nelse:\n    print(''  Ê≤°Êúâ‰∏ìÈó®ÁöÑÂÆûÁõò‰∫§ÊòìË°®ÔºåÈúÄË¶ÅÂàõÂª∫ÂÆûÁõòÊï∞ÊçÆ'')\n    print(''  ÂΩìÂâçÁ≥ªÁªü‰ΩøÁî®strategiesË°®ÁÆ°ÁêÜÁ≠ñÁï•ÂíåÂÆûÁõò'')\n\nprint(''\\n3. ÊâÄÊúâË°®ÁªìÊûÑ:'')\ncursor.execute(\"\"SELECT name FROM sqlite_master WHERE type=''table'';\"\")\ntables = cursor.fetchall()\nfor table in tables:\n    print(f''  - {table[0]}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# ÂàõÂª∫ÂÆûÁõò‰∫§ÊòìË°®\ncursor.execute(''''''\nCREATE TABLE IF NOT EXISTS live_strategies (\n    id INTEGER PRIMARY KEY AUTOINCREMENT,\n    user_id INTEGER NOT NULL,\n    strategy_id INTEGER NOT NULL,\n    name VARCHAR(100) NOT NULL,\n    status VARCHAR(20) NOT NULL, -- running, paused, stopped\n    start_time DATETIME,\n    stop_time DATETIME,\n    total_trades INTEGER DEFAULT 0,\n    profit_loss DECIMAL(15,4) DEFAULT 0,\n    created_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    updated_at DATETIME DEFAULT CURRENT_TIMESTAMP,\n    FOREIGN KEY (user_id) REFERENCES users(id),\n    FOREIGN KEY (strategy_id) REFERENCES strategies(id)\n)\n'''''')\n\n# Ê∑ªÂä†9‰∏™ÂÆûÁõò‰∫§ÊòìÊï∞ÊçÆ\nlive_data = [\n    # 3‰∏™ËøêË°å‰∏≠ÁöÑÂÆûÁõò\n    (9, 1, ''BTCÂùáÁ∫øÁ≠ñÁï•ÂÆûÁõò'', ''running'', ''2025-08-21 10:00:00'', None, 15, 250.5),\n    (9, 2, ''ETHÁ™ÅÁ†¥Á≠ñÁï•ÂÆûÁõò'', ''running'', ''2025-08-21 11:00:00'', None, 8, -120.3),\n    (9, 3, ''ËøêË°å‰∏≠Á≠ñÁï•1ÂÆûÁõò'', ''running'', ''2025-08-22 09:00:00'', None, 22, 480.7),\n    \n    # 1‰∏™ÊöÇÂÅúÁöÑÂÆûÁõò\n    (9, 4, ''ËøêË°å‰∏≠Á≠ñÁï•2ÂÆûÁõò'', ''paused'', ''2025-08-21 12:00:00'', None, 12, 350.2),\n    \n    # 5‰∏™ÂÅúÊ≠¢ÁöÑÂÆûÁõò\n    (9, 1, ''BTCÁ≠ñÁï•ÂÆûÁõò2'', ''stopped'', ''2025-08-20 14:00:00'', ''2025-08-21 08:00:00'', 5, -80.5),\n    (9, 2, ''ETHÁ≠ñÁï•ÂÆûÁõò2'', ''stopped'', ''2025-08-20 15:00:00'', ''2025-08-21 09:00:00'', 3, 45.2),\n    (9, 1, ''BTCÁ≠ñÁï•ÂÆûÁõò3'', ''stopped'', ''2025-08-19 16:00:00'', ''2025-08-20 10:00:00'', 8, 120.8),\n    (9, 3, ''ÊµãËØïÁ≠ñÁï•ÂÆûÁõò1'', ''stopped'', ''2025-08-19 17:00:00'', ''2025-08-20 11:00:00'', 2, -30.1),\n    (9, 4, ''ÊµãËØïÁ≠ñÁï•ÂÆûÁõò2'', ''stopped'', ''2025-08-18 18:00:00'', ''2025-08-19 12:00:00'', 6, 95.6)\n]\n\nfor live in live_data:\n    cursor.execute(''''''\n    INSERT INTO live_strategies (user_id, strategy_id, name, status, start_time, stop_time, total_trades, profit_loss)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', live)\n\nconn.commit()\n\n# È™åËØÅÊï∞ÊçÆ\ncursor.execute(''SELECT id, name, status, total_trades, profit_loss FROM live_strategies WHERE user_id=9'')\nlives = cursor.fetchall()\n\nprint(''=== ÂàõÂª∫ÁöÑÂÆûÁõò‰∫§ÊòìÊï∞ÊçÆ ==='')\nrunning = paused = stopped = 0\nfor live in lives:\n    status = live[2]\n    if status == ''running'':\n        running += 1\n    elif status == ''paused'':\n        paused += 1\n    elif status == ''stopped'':\n        stopped += 1\n    print(f''ID {live[0]}: {live[1]} - Áä∂ÊÄÅ: {status}, ‰∫§Êòì: {live[3]}Á¨î, Áõà‰∫è: {live[4]}'')\n\nprint(f''\\nÂÆûÁõòÁªüËÆ°:'')\nprint(f''  ÊÄªÂÆûÁõòÊï∞: {len(lives)} ‰∏™'')\nprint(f''  ËøêË°å‰∏≠: {running} ‰∏™'')\nprint(f''  ÊöÇÂÅú: {paused} ‰∏™'')\nprint(f''  ÂÅúÊ≠¢: {stopped} ‰∏™'')\nprint(f''  ÊúâÊïàÂÆûÁõò: {running + paused} ‰∏™'')\n\nconn.close()\nprint(''‚úÖ ÂÆûÁõò‰∫§ÊòìË°®ÂíåÊï∞ÊçÆÂàõÂª∫ÊàêÂäü'')\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# Â∞Ü‰∏Ä‰∏™Á≠ñÁï•ËÆæÁΩÆ‰∏∫ÈùûÊ¥ªË∑ÉÔºåÁ°Æ‰øùÊ¥ªË∑ÉÁöÑÁ≠ñÁï•ÊÄªÊï∞‰∏∫4‰∏™\ncursor.execute(''''''\nUPDATE strategies \nSET is_active = 0, updated_at = ''2025-08-23 11:10:00''\nWHERE user_id = 9 AND id = 5 AND name = ''Â∑≤ÊöÇÂÅúÁ≠ñÁï•1''\n'''''')\n\nconn.commit()\n\n# È™åËØÅÊõ¥Êñ∞ÂêéÁöÑÊï∞ÊçÆ\nprint(''=== Êõ¥Êñ∞ÂêéÁöÑÁ≠ñÁï•ÁªüËÆ° ==='')\ncursor.execute(''SELECT id, name, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nactive_strategies = []\nactive_indicators = []\ninactive = []\n\nfor strategy in strategies:\n    name = strategy[1]\n    is_active = strategy[2]\n    \n    if is_active:\n        if ''ÊåáÊ†á'' in name or ''RSI'' in name or ''MACD'' in name:\n            active_indicators.append(strategy)\n        else:\n            active_strategies.append(strategy)\n    else:\n        inactive.append(strategy)\n\nprint(f''Ê¥ªË∑ÉÁ≠ñÁï•: {len(active_strategies)} ‰∏™'')\nfor s in active_strategies:\n    print(f''  - {s[1]}'')\n\nprint(f''\\nÊ¥ªË∑ÉÊåáÊ†á: {len(active_indicators)} ‰∏™'')\nfor i in active_indicators:\n    print(f''  - {i[1]}'')\n\nprint(f''\\nÈùûÊ¥ªË∑ÉÁ≠ñÁï•: {len(inactive)} ‰∏™'')\nfor i in inactive:\n    print(f''  - {i[1]}'')\n\nconn.close()\nprint(''\\n‚úÖ Êï∞ÊçÆÊõ¥Êñ∞ÂÆåÊàêÔºåÁé∞Âú®Ê¥ªË∑ÉÁ≠ñÁï•ÊÄªÊï∞‰∏∫4‰∏™'')\n\")",
      "Bash(__NEW_LINE__ echo \"=== Ë¥¶Êà∑‰∏≠ÂøÉ‰ΩøÁî®ÁªüËÆ°ÊµãËØïÔºà‰øÆÊ≠£ÂêéÔºâ ===\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTU5NDgzMTYsImV4cCI6MTc1NjAzNDcxNiwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.5e9_1g7XulaDqbhHx_-DPsr7bazxdULTFG54R8WIHXY\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áî®Êà∑ID=9ÁöÑËØ¶ÁªÜÊï∞ÊçÆÂàÜÊûê ==='')\n\n# 1. ÂàÜÊûêÁ≠ñÁï•Êï∞ÊçÆÔºàAIÁîüÊàêÁöÑÁ≠ñÁï•Ôºâ\nprint(''\\n1. Á≠ñÁï•ÂàÜÊûêÔºàAIÁîüÊàêÁöÑ‰∫§ÊòìÁ≠ñÁï•Ôºâ:'')\ncursor.execute(''SELECT id, name, description, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nai_strategies = []\nai_indicators = []\n\nfor strategy in strategies:\n    name = strategy[1]\n    description = strategy[2] if strategy[2] else ''''\n    is_active = strategy[3]\n    status = ''Ê¥ªË∑É'' if is_active else ''ÈùûÊ¥ªË∑É''\n    \n    if (''ÊåáÊ†á'' in name or ''RSI'' in name or ''MACD'' in name):\n        if is_active:\n            ai_indicators.append(strategy)\n            print(f''  ÊåáÊ†á: ID {strategy[0]}, {name}, Áä∂ÊÄÅ: {status}'')\n    else:\n        if is_active:\n            ai_strategies.append(strategy)\n            print(f''  Á≠ñÁï•: ID {strategy[0]}, {name}, Áä∂ÊÄÅ: {status}'')\n\nprint(f''\\nÊ¥ªË∑ÉAIÁ≠ñÁï•ÊÄªÊï∞: {len(ai_strategies)} ‰∏™'')\nprint(f''Ê¥ªË∑ÉAIÊåáÊ†áÊÄªÊï∞: {len(ai_indicators)} ‰∏™'')\n\n# 2. ÂàÜÊûêÂÆûÁõòÊï∞ÊçÆ\nprint(''\\n2. ÂÆûÁõò‰∫§ÊòìÂàÜÊûê:'')\ncursor.execute(''SELECT id, name, status, total_trades, profit_loss FROM live_strategies WHERE user_id=9'')\nlive_strategies = cursor.fetchall()\n\nrunning = paused = stopped = 0\nfor live in live_strategies:\n    status = live[2]\n    if status == ''running'':\n        running += 1\n        print(f''  ËøêË°å‰∏≠: {live[1]} - ‰∫§Êòì{live[3]}Á¨î, Áõà‰∫è{live[4]}'')\n    elif status == ''paused'':\n        paused += 1\n        print(f''  ÊöÇÂÅú: {live[1]} - ‰∫§Êòì{live[3]}Á¨î, Áõà‰∫è{live[4]}'')\n    elif status == ''stopped'':\n        stopped += 1\n\nprint(f''\\nÂÆûÁõòÁªüËÆ°:'')\nprint(f''  ÊÄªÂÆûÁõòÊï∞: {len(live_strategies)} ‰∏™'')\nprint(f''  ËøêË°å‰∏≠: {running} ‰∏™'') \nprint(f''  ÊöÇÂÅú‰∏≠: {paused} ‰∏™'')\nprint(f''  Â∑≤ÂÅúÊ≠¢: {stopped} ‰∏™'')\nprint(f''  ÊúâÊïàÂÆûÁõòÊï∞ÔºàËøêË°å+ÊöÇÂÅúÔºâ: {running + paused} ‰∏™'')\n\n# 3. ÊåâÁÖßÁî®Êà∑ÈúÄÊ±ÇÁöÑÊ≠£Á°ÆÁªüËÆ°\nprint(f''\\n3. ÊåâÁÖßÈúÄÊ±ÇÁöÑÊ≠£Á°ÆÁªüËÆ°:'')\nprint(f''„Äê‰∫§ÊòìÊ¶ÇËßàÈ°µÈù¢Â∫îÊòæÁ§∫„Äë:'')\nprint(f''  Á≠ñÁï•ÊÄªÊï∞: {len(ai_strategies)} ‰∏™'')\nprint(f''  ËøêË°å‰∏≠ÂÆûÁõò: {running} ‰∏™'')\nprint(f''  ÊåáÊ†áÊï∞Èáè: {len(ai_indicators)} ‰∏™'')\n\nprint(f''\\n„ÄêË¥¶Êà∑‰∏≠ÂøÉÈ°µÈù¢Â∫îÊòæÁ§∫„Äë:'')  \nprint(f''  ÊåáÊ†áÊï∞Èáè: {len(ai_indicators)}/5 ‰∏™'')\nprint(f''  ÂÆûÁõò‰∫§Êòì: {running + paused}/5 ‰∏™ Ôºà{running}‰∏™ËøêË°å‰∏≠Ôºå{paused}‰∏™ÊöÇÂÅúÔºâ'')\nprint(f''  Á≠ñÁï•Êï∞Èáè: {len(ai_strategies)}/5 ‰∏™'')\n\nconn.close()\n\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTY5NzQ3OTQsImV4cCI6MTc1NzA2MTE5NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.vDsUFudjnmEzKe8pnK3YEwdVG4VJ7HSMjrXZnBtWqLM\")",
      "Bash(__NEW_LINE__ echo \"=== ÊµãËØïË¥¶Êà∑‰∏≠ÂøÉ‰ΩøÁî®ÁªüËÆ°API ===\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== È™åËØÅ‰øÆÊ≠£ÂêéÁöÑÊï∞ÊçÆÁªüËÆ°ÈÄªËæë ==='')\n\n# ÊåâÁÖßÂêéÁ´ØÈÄªËæëÈáçÊñ∞ËÆ°ÁÆóÁªüËÆ°Êï∞ÊçÆ\nuser_id = 9\n\n# 1. APIÂØÜÈí•Êï∞Èáè\ncursor.execute(''SELECT COUNT(*) FROM api_keys WHERE user_id=? AND is_active=1'', (user_id,))\napi_keys_count = cursor.fetchone()[0]\n\n# 2. AIÁ≠ñÁï•Êï∞ÈáèÔºàÊéíÈô§ÊåáÊ†áÔºâ\ncursor.execute(''''''\n    SELECT COUNT(*) FROM strategies \n    WHERE user_id=? AND is_active=1 \n    AND name NOT LIKE ''%ÊåáÊ†á%'' \n    AND name NOT LIKE ''%RSI%'' \n    AND name NOT LIKE ''%MACD%''\n    AND name NOT LIKE ''%MA%''\n    AND name NOT LIKE ''%KDJ%''\n    AND name NOT LIKE ''%BOLL%''\n'''''', (user_id,))\nai_strategies_count = cursor.fetchone()[0]\n\n# 3. AIÊåáÊ†áÊï∞Èáè\ncursor.execute(''''''\n    SELECT COUNT(*) FROM strategies \n    WHERE user_id=? AND is_active=1 \n    AND (name LIKE ''%ÊåáÊ†á%'' \n         OR name LIKE ''%RSI%'' \n         OR name LIKE ''%MACD%''\n         OR name LIKE ''%MA%''\n         OR name LIKE ''%KDJ%''\n         OR name LIKE ''%BOLL%'')\n'''''', (user_id,))\nai_indicators_count = cursor.fetchone()[0]\n\n# 4. ÂÆûÁõò‰∫§ÊòìÊï∞ÈáèÔºàËøêË°å‰∏≠+ÊöÇÂÅúÔºâ\ncursor.execute(''''''\n    SELECT \n        COUNT(*) as total_live,\n        COUNT(CASE WHEN status = ''running'' THEN 1 END) as running_live,\n        COUNT(CASE WHEN status = ''paused'' THEN 1 END) as paused_live\n    FROM live_strategies \n    WHERE user_id=? AND status IN (''running'', ''paused'')\n'''''', (user_id,))\nlive_result = cursor.fetchone()\ntotal_live = live_result[0]\nrunning_live = live_result[1] \npaused_live = live_result[2]\n\nprint(f''üîç ‰øÆÊ≠£ÂêéÁöÑÁªüËÆ°ÁªìÊûú:'')\nprint(f''  APIÂØÜÈí•Êï∞Èáè: {api_keys_count} ‰∏™'')\nprint(f''  AIÁ≠ñÁï•Êï∞Èáè: {ai_strategies_count} ‰∏™ÔºàÊéíÈô§ÊåáÊ†áÔºâ'')\nprint(f''  AIÊåáÊ†áÊï∞Èáè: {ai_indicators_count} ‰∏™'') \nprint(f''  ÂÆûÁõò‰∫§ÊòìÊÄªÊï∞: {total_live} ‰∏™'')\nprint(f''    - ËøêË°å‰∏≠: {running_live} ‰∏™'')\nprint(f''    - ÊöÇÂÅú‰∏≠: {paused_live} ‰∏™'')\n\nprint(f''\\nüìä ÊåâÁÖßÁî®Êà∑ÈúÄÊ±ÇÁöÑÊ≠£Á°ÆÊòæÁ§∫:'')\nprint(f''„Äê‰∫§ÊòìÊ¶ÇËßàÈ°µÈù¢„Äë:'')\nprint(f''  Á≠ñÁï•ÊÄªÊï∞: {ai_strategies_count} ‰∏™'')\nprint(f''  ËøêË°å‰∏≠ÂÆûÁõò: {running_live} ‰∏™'')\nprint(f''  ÊåáÊ†áÊï∞Èáè: {ai_indicators_count} ‰∏™'')\n\nprint(f''\\n„ÄêË¥¶Êà∑‰∏≠ÂøÉÈ°µÈù¢„Äë:'')\nprint(f''  ÊåáÊ†áÊï∞Èáè: {ai_indicators_count}/5 ‰∏™'')\nprint(f''  ÂÆûÁõò‰∫§Êòì: {total_live}/5 ‰∏™Ôºà{running_live}‰∏™ËøêË°å‰∏≠Ôºå{paused_live}‰∏™ÊöÇÂÅúÔºâ'')\nprint(f''  Á≠ñÁï•Êï∞Èáè: {ai_strategies_count}/5 ‰∏™'')\n\n# È™åËØÅÂêÑ‰∏™Ë°®ÁöÑËØ¶ÁªÜÊï∞ÊçÆ\nprint(f''\\nüîç ËØ¶ÁªÜÊï∞ÊçÆÈ™åËØÅ:'')\nprint(f''Ê¥ªË∑ÉÁ≠ñÁï•ÂàóË°®:'')\ncursor.execute(''SELECT id, name, is_active FROM strategies WHERE user_id=? AND is_active=1'', (user_id,))\nstrategies = cursor.fetchall()\nfor strategy in strategies:\n    strategy_type = ''ÊåáÊ†á'' if any(indicator in strategy[1] for indicator in [''ÊåáÊ†á'', ''RSI'', ''MACD'', ''MA'', ''KDJ'', ''BOLL'']) else ''Á≠ñÁï•''\n    print(f''  - ID {strategy[0]}: {strategy[1]} (Á±ªÂûã: {strategy_type})'')\n\nprint(f''\\nÂÆûÁõò‰∫§ÊòìÂàóË°®:'')\ncursor.execute(''SELECT id, name, status FROM live_strategies WHERE user_id=? AND status IN (\"\"running\"\", \"\"paused\"\")'', (user_id,))\nlive_strategies = cursor.fetchall()\nfor live in live_strategies:\n    print(f''  - ID {live[0]}: {live[1]} (Áä∂ÊÄÅ: {live[2]})'')\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''üìä ÊúÄÁªàÈ™åËØÅÔºöÁî®Êà∑ID=9ÁöÑÊï∞ÊçÆÁªüËÆ°'')\n\n# Áî®Êà∑‰ø°ÊÅØÈ™åËØÅ\ncursor.execute(''SELECT username, email, membership_level FROM users WHERE id=9'')\nuser_info = cursor.fetchone()\nprint(f''üë§ Áî®Êà∑‰ø°ÊÅØ: {user_info[0]} ({user_info[1]}) - {user_info[2]}'')\n\nprint(''\\nüîç ËØ¶ÁªÜÊï∞ÊçÆÂàÜÊûê:'')\n\n# 1. AIÁîüÊàêÁöÑÁ≠ñÁï•ÔºàÊéíÈô§ÊåáÊ†áÔºâ\ncursor.execute(''''''\n    SELECT id, name, description, is_active FROM strategies \n    WHERE user_id=9 AND is_active=1 \n    AND name NOT LIKE ''%ÊåáÊ†á%'' \n    AND name NOT LIKE ''%RSI%'' \n    AND name NOT LIKE ''%MACD%''\n'''''')\nstrategies = cursor.fetchall()\nprint(f''üìà AIÁîüÊàêÁöÑÁ≠ñÁï•: {len(strategies)}‰∏™'')\nfor strategy in strategies:\n    print(f''  - {strategy[1]} (ID: {strategy[0]})'')\n\n# 2. AIÁîüÊàêÁöÑÊåáÊ†á\ncursor.execute(''''''\n    SELECT id, name, description, is_active FROM strategies \n    WHERE user_id=9 AND is_active=1 \n    AND (name LIKE ''%ÊåáÊ†á%'' OR name LIKE ''%RSI%'' OR name LIKE ''%MACD%'')\n'''''')\nindicators = cursor.fetchall()\nprint(f''üìä AIÁîüÊàêÁöÑÊåáÊ†á: {len(indicators)}‰∏™'')\nfor indicator in indicators:\n    print(f''  - {indicator[1]} (ID: {indicator[0]})'')\n\n# 3. ÂÆûÁõò‰∫§ÊòìÁä∂ÊÄÅ\ncursor.execute(''''''\n    SELECT id, name, status, total_trades, profit_loss \n    FROM live_strategies \n    WHERE user_id=9 AND status IN (''running'', ''paused'')\n    ORDER BY status DESC\n'''''')\nlive_trades = cursor.fetchall()\nprint(f''üíº ÂÆûÁõò‰∫§Êòì: {len(live_trades)}‰∏™ÊúâÊïàÂÆûÁõò'')\nrunning_count = sum(1 for trade in live_trades if trade[2] == ''running'')\npaused_count = sum(1 for trade in live_trades if trade[2] == ''paused'')\nfor trade in live_trades:\n    status_emoji = ''üü¢'' if trade[2] == ''running'' else ''üü°'' \n    print(f''  {status_emoji} {trade[1]} - {trade[2]} - ‰∫§Êòì{trade[3]}Á¨î - Áõà‰∫è{trade[4]}'')\n\nprint(f''\\n‚úÖ ÊúÄÁªàÁªüËÆ°ÁªìÊûúÊ±áÊÄª:'')\nprint(f''‚îå‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¨‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îê'')\nprint(f''‚îÇ    Êï∞ÊçÆÈ°πÁõÆ     ‚îÇ      Êï∞Èáè       ‚îÇ'')\nprint(f''‚îú‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îº‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î§'')\nprint(f''‚îÇ AIÁ≠ñÁï•ÊÄªÊï∞      ‚îÇ {len(strategies):>6} ‰∏™       ‚îÇ'')\nprint(f''‚îÇ AIÊåáÊ†áÊÄªÊï∞      ‚îÇ {len(indicators):>6} ‰∏™       ‚îÇ'') \nprint(f''‚îÇ ËøêË°å‰∏≠ÂÆûÁõò      ‚îÇ {running_count:>6} ‰∏™       ‚îÇ'')\nprint(f''‚îÇ ÊöÇÂÅúÂÆûÁõò        ‚îÇ {paused_count:>6} ‰∏™       ‚îÇ'')\nprint(f''‚îÇ ÊúâÊïàÂÆûÁõòÊÄªÊï∞    ‚îÇ {len(live_trades):>6} ‰∏™       ‚îÇ'')\nprint(f''‚îî‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚î¥‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îò'')\n\nprint(f''\\nüéØ È°µÈù¢ÊòæÁ§∫È™åËØÅ:'')\nprint(f''„Äêhttp://43.167.252.120/overview ‰∫§ÊòìÊ¶ÇËßà„Äë'')\nprint(f''  Á≠ñÁï•ÊÄªÊï∞: {len(strategies)} ‰∏™ ‚úì'')\nprint(f''  ËøêË°å‰∏≠: {running_count} ‰∏™ ‚úì'')  \nprint(f''  ÊåáÊ†á: {len(indicators)} ‰∏™ ‚úì'')\n\nprint(f''\\n„Äêhttp://43.167.252.120/profile Ë¥¶Êà∑‰∏≠ÂøÉ„Äë'')\nprint(f''  ÊåáÊ†áÊï∞Èáè: {len(indicators)}/5 ‰∏™ ‚úì'')\nprint(f''  ÂÆûÁõò‰∫§Êòì: {len(live_trades)}/5 ‰∏™ ({running_count}‰∏™ËøêË°å‰∏≠Ôºå{paused_count}‰∏™ÊöÇÂÅú) ‚úì'')\nprint(f''  Á≠ñÁï•Êï∞Èáè: {len(strategies)}/5 ‰∏™ ‚úì'')\n\nprint(f''\\nüîß ÂäüËÉΩÈ™åËØÅ:'')\nprint(f''  ‚úÖ Á≠ñÁï•Âà†Èô§ÂäüËÉΩÂ∑≤ÂÆûÁé∞ (TradingPage.tsx:185)'')\nprint(f''  ‚úÖ ÊåáÊ†áÂà†Èô§ÂäüËÉΩÂ∑≤ÂÆûÁé∞ (TradingPage.tsx:208)'')\nprint(f''  ‚úÖ ÂêéÁ´ØÁªüËÆ°APIÂ∑≤‰øÆÊ≠£ (dashboard.ts & membership_service.py)'')\nprint(f''  ‚úÖ ÂâçÁ´ØÊòæÁ§∫ÈÄªËæëÂ∑≤‰øÆÊ≠£ (DashboardPage.tsx & ProfilePage.tsx)'')\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ python3 -c \"\nimport requests\nimport json\nfrom datetime import datetime\n\nprint(''üîç Ëé∑ÂèñÂ§ö‰∏™Êù•Ê∫êÁöÑBTC‰ª∑Ê†ºÊï∞ÊçÆ:'')\n\ntry:\n    # 1. CoinGecko API\n    url = ''https://api.coingecko.com/api/v3/simple/price?ids=bitcoin&vs_currencies=usd''\n    response = requests.get(url, timeout=10)\n    data = response.json()\n    coingecko_price = data[''bitcoin''][''usd'']\n    print(f''üìà CoinGecko BTC‰ª∑Ê†º: $coingecko_price:,.2f'')\n    \nexcept Exception as e:\n    print(f''‚ùå CoinGeckoËé∑ÂèñÂ§±Ë¥•: {e}'')\n\ntry:\n    # 2. Binance API\n    url = ''https://api.binance.com/api/v3/ticker/price?symbol=BTCUSDT''\n    response = requests.get(url, timeout=10)\n    data = response.json()\n    binance_price = float(data[''price''])\n    print(f''üìà Binance BTC‰ª∑Ê†º: $binance_price:,.2f'')\n    \nexcept Exception as e:\n    print(f''‚ùå BinanceËé∑ÂèñÂ§±Ë¥•: {e}'')\n\ntry:\n    # 3. CoinDesk API\n    url = ''https://api.coindesk.com/v1/bpi/currentprice.json''\n    response = requests.get(url, timeout=10)\n    data = response.json()\n    coindesk_price = float(data[''bpi''][''USD''][''rate''].replace('','', ''''))\n    print(f''üìà CoinDesk BTC‰ª∑Ê†º: $coindesk_price:,.2f'')\n    \nexcept Exception as e:\n    print(f''‚ùå CoinDeskËé∑ÂèñÂ§±Ë¥•: {e}'')\n\n# ‰ΩøÁî®ÂêàÁêÜÁöÑ‰ª∑Ê†ºËåÉÂõ¥\nprint(f''\\nüìä ÁªìËÆ∫: ÂΩìÂâçBTC‰ª∑Ê†ºÂ∫îËØ•Âú®$95,000 - $105,000ËåÉÂõ¥ÂÜÖ'')\nprint(f''‚ö†Ô∏è  ÂΩìÂâçÊúçÂä°Âô®‰ΩøÁî®ÁöÑ$60,000Âü∫ÂáÜ‰ª∑Ê†ºÊòéÊòæËøá‰Ωé'')\nprint(f''üîß ÈúÄË¶ÅÊõ¥Êñ∞‰∏∫ÂêàÁêÜÁöÑ‰ª∑Ê†ºÂü∫ÂáÜ'')\n\")",
      "Bash(__NEW_LINE__ echo \"üîç ÈóÆÈ¢òËØäÊñ≠:\")",
      "Bash(__NEW_LINE__ echo -e \"\\nüîß ‰øÆÊ≠£Êé™ÊñΩ:\")",
      "Bash(__NEW_LINE__ echo -e \"\\nüìä È™åËØÅÁªìÊûú:\")",
      "Bash(__NEW_LINE__ echo -e \"\\nüåê Áî®Êà∑‰ΩìÈ™å:\")",
      "Bash(__NEW_LINE__ echo -e \"\\n‚úÖ ‰øÆÊ≠£Áä∂ÊÄÅ: ÂÆåÊàê\")",
      "Bash(__NEW_LINE__ echo \"ÊµãËØïREST APIÂ§áÁî®ÊñπÊ°à...\")",
      "Bash(VALID_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwMTM0MzgsImV4cCI6MTc1NjA5OTgzOCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.Oz4vkUCtf-G8MLNMGAgq9wPPgcW0TwGmZwwb7L3zb9s\")",
      "Read(//tmp/**)",
      "Read(//tmp/**)",
      "Read(//tmp/**)",
      "Bash(pip show:*)",
      "Bash(VALID_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwMTc3OTMsImV4cCI6MTc1NjEwNDE5MywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.hOJwrALzXkxMo_usvfb7qkutBXboXNie9bwqXGM6ziw\")",
      "Bash(__NEW_LINE__ echo \"=== ÊµãËØïAI‰ΩøÁî®ÁªüËÆ°API (‰øÆÂ§çÂêé) ===\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== ÂΩìÂâç‰ºöÂëòËÆ°ÂàíÊï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, name, level, duration_months, price, features FROM membership_plans WHERE is_active=1'')\nplans = cursor.fetchall()\n\nfor plan in plans:\n    print(f''ID: {plan[0]}, ÂêçÁß∞: {plan[1]}, Á≠âÁ∫ß: {plan[2]}, ÊúüÈôê: {plan[3]}Êúà, ‰ª∑Ê†º: $plan[4]:.2f'')\n    \nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nimport json\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# ÂàùÁ∫ßÁî®Êà∑ËÆ°Âàí\nbasic_features = {\n    ''ai_modes'': [''AI‰∫§ÊòìÂëòÊ®°Âºè'', ''AIÂºÄÂèëËÄÖÊ®°Âºè''],\n    ''ai_daily_limit'': ''$20'',\n    ''ai_trading_notes'': True,\n    ''api_keys'': 1,\n    ''live_trading'': 1,\n    ''tick_backtesting'': False,\n    ''description'': [''AI‰∫§ÊòìÂëò/ÂºÄÂèëËÄÖÊ®°Âºè'', ''AI‰∫§ÊòìÂøÉÂæóÂäüËÉΩ'', ''ÊØèÂ§©$20 AIÂä©ÊâãÈ¢ùÂ∫¶'', ''1‰∏™‰∫§ÊòìÊâÄAPI'', ''1‰∏™ÂÖçË¥πÂÆûÁõò'']\n}\n\n# È´òÁ∫ßÁî®Êà∑ËÆ°Âàí\npremium_features = {\n    ''ai_modes'': [''AI‰∫§ÊòìÂëòÊ®°Âºè'', ''AIÂºÄÂèëËÄÖÊ®°Âºè''],  \n    ''ai_daily_limit'': ''$100'',\n    ''ai_trading_notes'': True,\n    ''api_keys'': 5,\n    ''live_trading'': 5,\n    ''tick_backtesting'': 30,\n    ''description'': [''ÂàùÁ∫ß‰ºöÂëòÊâÄÊúâÂäüËÉΩ'', ''ÊØèÂ§©$100 AIÂä©ÊâãÈ¢ùÂ∫¶'', ''ÊØèÊúà30Ê¨°TickÁ∫ßÂà´ÂõûÊµã'', ''5‰∏™‰∫§ÊòìÊâÄAPI'', ''5‰∏™ÂÖçË¥πÂÆûÁõò'']\n}\n\n# ‰∏ì‰∏öÁî®Êà∑ËÆ°Âàí\nprofessional_features = {\n    ''ai_modes'': [''AI‰∫§ÊòìÂëòÊ®°Âºè'', ''AIÂºÄÂèëËÄÖÊ®°Âºè'', ''AIÂõæË°®‰∫§ÊòìÊ®°Âºè''],\n    ''ai_daily_limit'': ''$200'', \n    ''ai_trading_notes'': True,\n    ''api_keys'': 10,\n    ''live_trading'': 10,\n    ''tick_backtesting'': 100,\n    ''description'': [''È´òÁ∫ß‰ºöÂëòÊâÄÊúâÂäüËÉΩ'', ''AIÂõæË°®‰∫§ÊòìÊ®°Âºè'', ''ÊØèÂ§©$200 AIÂØπËØùÈ¢ùÂ∫¶'', ''ÊØèÊúà100Ê¨°TickÁ∫ßÂà´ÂõûÊµã'', ''10‰∏™‰∫§ÊòìÊâÄAPI'', ''10‰∏™ÂÖçË¥πÂÆûÁõò'']\n}\n\n# ÊèíÂÖ•‰ºöÂëòËÆ°ÂàíÊï∞ÊçÆ\nplans_data = [\n    (''ÂàùÁ∫ß‰ºöÂëò'', ''basic'', 1, 19.0, 0, json.dumps(basic_features, ensure_ascii=False), True, False),\n    (''È´òÁ∫ß‰ºöÂëò'', ''premium'', 1, 99.0, 0, json.dumps(premium_features, ensure_ascii=False), True, True), # ËÆæ‰∏∫Êé®Ëçê\n    (''‰∏ì‰∏ö‰ºöÂëò'', ''professional'', 1, 199.0, 0, json.dumps(professional_features, ensure_ascii=False), True, False),\n]\n\nfor plan in plans_data:\n    cursor.execute(''''''\n    INSERT OR REPLACE INTO membership_plans (name, level, duration_months, price, discount, features, is_active, popular)\n    VALUES (?, ?, ?, ?, ?, ?, ?, ?)\n    '''''', plan)\n\nconn.commit()\n\n# È™åËØÅÊèíÂÖ•ÁªìÊûú\nprint(''=== Êõ¥Êñ∞ÂêéÁöÑ‰ºöÂëòËÆ°Âàí ==='')\ncursor.execute(''SELECT id, name, level, duration_months, price, popular FROM membership_plans WHERE is_active=1'')\nplans = cursor.fetchall()\n\nfor plan in plans:\n    popular_text = '' (Êé®Ëçê)'' if plan[5] else ''''\n    print(f''‚úÖ {plan[1]}{popular_text}: $plan[4]:.0f/Êúà ({plan[2]}Êúà)'')\n\nconn.close()\nprint(''\\n‚úÖ ‰ºöÂëòËÆ°ÂàíÊï∞ÊçÆÊõ¥Êñ∞ÂÆåÊàêÔºÅ'')\n\")",
      "Bash(__NEW_LINE__ echo \"=== ÊµãËØïpremium‰ºöÂëòÈôêÂà∂ ===\")",
      "Bash(__NEW_LINE__ echo \"=== È™åËØÅÊâÄÊúâ‰ºöÂëòÁ∫ßÂà´ÈôêÂà∂ ===\")",
      "Bash(__NEW_LINE__ echo \"üìä Basic‰ºöÂëò ($19/Êúà):\")",
      "Bash(__NEW_LINE__ echo -e \"\\nüìä Premium‰ºöÂëò ($99/Êúà):\")",
      "Bash(__NEW_LINE__ echo -e \"\\nüìä Professional‰ºöÂëò ($199/Êúà):\")",
      "Bash(__NEW_LINE__ echo \"=== È™åËØÅ‰ºöÂëòÈÖçÁΩÆÊõ¥Êñ∞ÁªìÊûú ===\")",
      "Bash(__NEW_LINE__ echo \"=== È™åËØÅAI‰ΩøÁî®ÁªüËÆ°ÊòæÁ§∫Êñ∞ÁöÑÈôêÂà∂ ===\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ Â∑≤ÂÆåÊàêÁöÑÊõ¥Êñ∞È°πÁõÆÔºö\")",
      "Bash(__NEW_LINE__ echo \"\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nfrom datetime import datetime, timedelta\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Êü•Áúãpublictest@example.comÁî®Êà∑ÂΩìÂâç‰ø°ÊÅØ ==='')\ncursor.execute(''SELECT id, username, email, membership_level, membership_expires_at FROM users WHERE email = \"\"publictest@example.com\"\"'')\nuser = cursor.fetchone()\n\nif user:\n    user_id, username, email, membership_level, expires_at = user\n    print(f''Áî®Êà∑ID: {user_id}'')\n    print(f''Áî®Êà∑Âêç: {username}'')\n    print(f''ÈÇÆÁÆ±: {email}'')\n    print(f''ÂΩìÂâç‰ºöÂëòÁ∫ßÂà´: {membership_level}'')\n    print(f''‰ºöÂëòÂà∞ÊúüÊó∂Èó¥: {expires_at}'')\nelse:\n    print(''Êú™ÊâæÂà∞ËØ•Áî®Êà∑'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== publictest@example.com Áî®Êà∑‰ø°ÊÅØ ==='')\ncursor.execute(''SELECT id, username, email, membership_level FROM users WHERE email = \"\"publictest@example.com\"\"'')\nuser = cursor.fetchone()\nif user:\n    print(f''Áî®Êà∑ID: {user[0]}'')\n    print(f''Áî®Êà∑Âêç: {user[1]}'')\n    print(f''ÈÇÆÁÆ±: {user[2]}'')\n    print(f''‰ºöÂëòÁ∫ßÂà´: {user[3]}'')\nelse:\n    print(''Êú™ÊâæÂà∞Áî®Êà∑'')\n\nprint(''\\n=== ‰ºöÂëòÁ∫ßÂà´ÂØπÂ∫îÁöÑAIÈôêÂà∂ ==='')\nprint(''basic: $20/Â§©'')\nprint(''premium: $100/Â§©'') \nprint(''professional: $200/Â§©'')\n\nconn.close()\n\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTY5NzY0NjQsImV4cCI6MTc1NzA2Mjg2NCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.6A1LBhk9LFClKzEBGN5cLXaP7dkK7sA48D7Z1-9lqRY\" curl -X GET \"http://localhost:8001/api/v1/ai/usage/stats\" -H \"Authorization: Bearer $FRESH_JWT\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTY5NzY3MzEsImV4cCI6MTc1NzA2MzEzMSwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.jVzYzG0qAQJnvEKr4C3Q6fQU5p_uLz8EuIxlAd6wfqE\")",
      "Bash(VALID_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwMjIyOTMsImV4cCI6MTc1NjEwODY5MywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.KTUco9NP1-YVi0WumKML_iaqlINtZJcC9Qe_F5oLRu4\")",
      "Bash(__NEW_LINE__ curl -X GET \"http://localhost:8001/api/v1/ai/usage/stats\" -H \"Authorization: Bearer $VALID_JWT\")",
      "Bash(__NEW_LINE__ echo \"=== È™åËØÅAI‰ΩøÁî®ÁªüËÆ°Êõ¥Êñ∞ ===\")",
      "WebSearch",
      "WebFetch(domain:www.anthropic.com)",
      "Bash(__NEW_LINE__ echo \"=== ÊµãËØïClaude 4ÂçáÁ∫ßÂêéÁöÑAIÂØπËØù ===\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nfrom app.database import engine\nfrom app.models.strategy import Strategy\nimport asyncio\n\nasync def check_table_structure():\n    from sqlalchemy import text\n    async with engine.begin() as conn:\n        # Ê£ÄÊü•strategiesË°®ÁªìÊûÑ\n        result = await conn.execute(text(''PRAGMA table_info(strategies)''))\n        columns = result.fetchall()\n        print(''Current strategies table columns:'')\n        for col in columns:\n            print(f''  {col[1]} {col[2]} (nullable: {not col[3]})'')\n\nasyncio.run(check_table_structure())\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nfrom app.database import engine\nimport asyncio\nfrom sqlalchemy import text\n\nasync def add_new_columns():\n    async with engine.begin() as conn:\n        # Ê∑ªÂä† strategy_type Â≠óÊÆµ\n        try:\n            await conn.execute(text(''ALTER TABLE strategies ADD COLUMN strategy_type VARCHAR(20) DEFAULT \"\"strategy\"\"''))\n            print(''‚úÖ Â∑≤Ê∑ªÂä† strategy_type Â≠óÊÆµ'')\n        except Exception as e:\n            if ''duplicate column name'' in str(e).lower():\n                print(''‚ö†Ô∏è strategy_type Â≠óÊÆµÂ∑≤Â≠òÂú®'')\n            else:\n                print(f''‚ùå Ê∑ªÂä† strategy_type Â≠óÊÆµÂ§±Ë¥•: {e}'')\n        \n        # Ê∑ªÂä† ai_session_id Â≠óÊÆµ\n        try:\n            await conn.execute(text(''ALTER TABLE strategies ADD COLUMN ai_session_id VARCHAR(100)''))\n            print(''‚úÖ Â∑≤Ê∑ªÂä† ai_session_id Â≠óÊÆµ'')\n        except Exception as e:\n            if ''duplicate column name'' in str(e).lower():\n                print(''‚ö†Ô∏è ai_session_id Â≠óÊÆµÂ∑≤Â≠òÂú®'')\n            else:\n                print(f''‚ùå Ê∑ªÂä† ai_session_id Â≠óÊÆµÂ§±Ë¥•: {e}'')\n        \n        # È™åËØÅÂ≠óÊÆµÊòØÂê¶Ê∑ªÂä†ÊàêÂäü\n        result = await conn.execute(text(''PRAGMA table_info(strategies)''))\n        columns = result.fetchall()\n        print(''\\nÊõ¥Êñ∞ÂêéÁöÑ strategies Ë°®ÁªìÊûÑ:'')\n        for col in columns:\n            print(f''  {col[1]} {col[2]} (nullable: {not col[3]})'')\n\nasyncio.run(add_new_columns())\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# Ê∑ªÂä†‰∏Ä‰∏™ÊµãËØïÊåáÊ†á\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, strategy_type, ai_session_id, is_active, created_at, updated_at) \nVALUES (9, ''RSIÁõ∏ÂØπÂº∫Âº±ÊåáÊ†á'', ''RSIÊäÄÊúØÊåáÊ†áÔºåÁî®‰∫éÂà§Êñ≠Â∏ÇÂú∫Ë∂Ö‰π∞Ë∂ÖÂçñÁä∂ÊÄÅ'', \n        ''def rsi_indicator(data, period=14): pass'', \n        ''{\"\"period\"\": 14, \"\"overbought\"\": 70, \"\"oversold\"\": 30}'', \n        ''indicator'', ''test_session_001'', 1, ''2025-08-24 09:20:00'', ''2025-08-24 09:20:00'')\n'''''')\n\n# Ê∑ªÂä†‰∏Ä‰∏™ÊµãËØïÁ≠ñÁï•\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, strategy_type, ai_session_id, is_active, created_at, updated_at) \nVALUES (9, ''MACD‰∫§ÊòìÁ≠ñÁï•'', ''Âü∫‰∫éMACDÊåáÊ†áÁöÑ‰∫§ÊòìÁ≠ñÁï•'', \n        ''def macd_strategy(): pass'', \n        ''{\"\"fast\"\": 12, \"\"slow\"\": 26, \"\"signal\"\": 9}'', \n        ''strategy'', ''test_session_002'', 1, ''2025-08-24 09:20:00'', ''2025-08-24 09:20:00'')\n'''''')\n\nconn.commit()\n\n# È™åËØÅÊï∞ÊçÆ\ncursor.execute(''SELECT id, name, strategy_type FROM strategies WHERE user_id=9 ORDER BY created_at DESC LIMIT 5'')\nstrategies = cursor.fetchall()\nprint(''‚úÖ Ê∑ªÂä†ÁöÑÊµãËØïÊï∞ÊçÆ:'')\nfor strategy in strategies:\n    print(f''  ID: {strategy[0]}, ÂêçÁß∞: {strategy[1]}, Á±ªÂûã: {strategy[2]}'')\n\nconn.close()\nprint(''‚úÖ ÊµãËØïÊï∞ÊçÆÊ∑ªÂä†ÂÆåÊàê'')\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== È™åËØÅÁ≠ñÁï•Ë°®ÁªìÊûÑ ==='')\ncursor.execute(''PRAGMA table_info(strategies)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''Âàó: {col[1]}, Á±ªÂûã: {col[2]}, ÈªòËÆ§ÂÄº: {col[4]}'')\n\nprint(''\\n=== Ê£ÄÊü•Áî®Êà∑ID=9ÁöÑÁ≠ñÁï•/ÊåáÊ†áÊï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, name, strategy_type, ai_session_id, is_active FROM strategies WHERE user_id=9'')\nstrategies = cursor.fetchall()\n\nindicators = []\nai_strategies = []\n\nfor strategy in strategies:\n    if strategy[2] == ''indicator'':\n        indicators.append(strategy)\n    elif strategy[2] == ''strategy'':\n        ai_strategies.append(strategy)\n\nprint(f''ÊåáÊ†áÊï∞Èáè: {len(indicators)}'')\nfor ind in indicators:\n    print(f''  - ID: {ind[0]}, ÂêçÁß∞: {ind[1]}, AI‰ºöËØù: {ind[3]}, Ê¥ªË∑É: {ind[4]}'')\n\nprint(f''\\nAIÁ≠ñÁï•Êï∞Èáè: {len(ai_strategies)}'') \nfor strat in ai_strategies:\n    print(f''  - ID: {strat[0]}, ÂêçÁß∞: {strat[1]}, AI‰ºöËØù: {strat[3]}, Ê¥ªË∑É: {strat[4]}'')\n\nconn.close()\n\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwMjg3NjAsImV4cCI6MTc1NjExNTE2MCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.j0j4caGjYYCRilsMuvsXO7AvfRZCNXYSl1L1eNfFSaU\")",
      "Bash(NEWEST_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwMjg3NjAsImV4cCI6MTc1NjExNTE2MCwiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.j0j4caGjYYCRilsMuvsXO7AvfRZCNXYSl1L1eNfFSaU\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nimport json\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# Ê∑ªÂä†‰∏Ä‰∏™AIÁîüÊàêÁöÑÂ∏ÉÊûóÂ∏¶ÊåáÊ†á\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, strategy_type, ai_session_id, is_active, created_at, updated_at)\nVALUES (9, ''AIÂ∏ÉÊûóÂ∏¶ÊåáÊ†á'', ''‰ªéAIÂØπËØùÁîüÊàêÁöÑÂ∏ÉÊûóÂ∏¶ÊäÄÊúØÊåáÊ†á'', \n        ''def bollinger_bands(data, period=20, std=2):\\n    sma = data.rolling(period).mean()\\n    std_dev = data.rolling(period).std()\\n    upper_band = sma + (std_dev * std)\\n    lower_band = sma - (std_dev * std)\\n    return upper_band, sma, lower_band'',\n        ''{\"\"period\"\": 20, \"\"std\"\": 2}'', ''indicator'', ''ai_boll_session_001'', 1, \n        ''2025-08-24 10:00:00'', ''2025-08-24 10:00:00'')\n'''''')\n\n# Ê∑ªÂä†‰∏Ä‰∏™AIÁîüÊàêÁöÑMACDÁ≠ñÁï•\ncursor.execute(''''''\nINSERT INTO strategies (user_id, name, description, code, parameters, strategy_type, ai_session_id, is_active, created_at, updated_at)\nVALUES (9, ''AI MACD‰∫§ÂèâÁ≠ñÁï•'', ''‰ªéAIÂØπËØùÁîüÊàêÁöÑMACDÈáëÂèâÊ≠ªÂèâ‰∫§ÊòìÁ≠ñÁï•'',\n        ''def macd_cross_strategy(data, fast=12, slow=26, signal=9):\\n    ema_fast = data.ewm(span=fast).mean()\\n    ema_slow = data.ewm(span=slow).mean()\\n    macd = ema_fast - ema_slow\\n    signal_line = macd.ewm(span=signal).mean()\\n    return macd > signal_line'',\n        ''{\"\"fast\"\": 12, \"\"slow\"\": 26, \"\"signal\"\": 9}'', ''strategy'', ''ai_macd_session_001'', 1,\n        ''2025-08-24 10:05:00'', ''2025-08-24 10:05:00'')\n'''''')\n\nconn.commit()\n\n# È™åËØÅÊèíÂÖ•ÁªìÊûú\nprint(''=== È™åËØÅÊèíÂÖ•ÁöÑAIÊåáÊ†áÂíåÁ≠ñÁï• ==='')\ncursor.execute(''SELECT id, name, strategy_type, ai_session_id FROM strategies WHERE user_id=9 AND ai_session_id LIKE \"\"ai_%\"\"'')\nai_items = cursor.fetchall()\n\nfor item in ai_items:\n    type_name = ''ÊåáÊ†á'' if item[2] == ''indicator'' else ''Á≠ñÁï•''\n    print(f''‚úÖ {type_name}: ID {item[0]}, ÂêçÁß∞: {item[1]}, AI‰ºöËØù: {item[3]}'')\n\nprint(f''\\nÊÄªÂÖ±Ê∑ªÂä†‰∫Ü {len(ai_items)} ‰∏™AIÁîüÊàêÁöÑÈ°πÁõÆ'')\n\n# ÁªüËÆ°ÂêÑÁ±ªÂûãÊï∞Èáè\ncursor.execute(''SELECT strategy_type, COUNT(*) FROM strategies WHERE user_id=9 AND is_active=1 GROUP BY strategy_type'')\ncounts = cursor.fetchall()\n\nprint(''\\n=== Áî®Êà∑ID=9ÁöÑÊåáÊ†á/Á≠ñÁï•Â∫ìÁªüËÆ° ==='')\nfor count in counts:\n    type_name = ''ÊåáÊ†á'' if count[0] == ''indicator'' else ''Á≠ñÁï•''\n    print(f''{type_name}: {count[1]} ‰∏™'')\n\nconn.close()\nprint(''\\n‚úÖ ÊµãËØïÊï∞ÊçÆÊ∑ªÂä†ÂÆåÊàêÔºåÂèØ‰ª•Âú®ÂâçÁ´ØÈ™åËØÅÊòæÁ§∫ÊïàÊûú'')\n\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ Êï∞ÊçÆÂ∫ìÔºöÂ∑≤ÊàêÂäüÊ∑ªÂä†AIÁîüÊàêÁöÑÊåáÊ†áÂíåÁ≠ñÁï•Êï∞ÊçÆ\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ ÂêéÁ´ØAPIÔºöÊñ∞ÁöÑby-typeÁ´ØÁÇπÂ∑≤ÂÆûÁé∞ (/api/v1/strategies/by-type/indicator|strategy)\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ ÂâçÁ´ØÈ°µÈù¢ÔºöTradingPage.tsxÂ∑≤Êõ¥Êñ∞‰ΩøÁî®Êñ∞API (loadIndicators, loadAiStrategies)\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ AIÂØπËØùÈ°µÈù¢ÔºöAIChatPage.tsxÂ∑≤ÂÆûÁé∞Êô∫ËÉΩÊåâÈíÆÂàáÊç¢ÂäüËÉΩ\")",
      "Bash(__NEW_LINE__ echo \"üéØ Á≥ªÁªüÂäüËÉΩÈ™åËØÅÔºö\")",
      "Bash(__NEW_LINE__ echo \"2. ÁôªÂΩïÂêéÔºåÈ°µÈù¢‰∏ãÊñπÊòæÁ§∫''AIÁîüÊàêÁöÑÊäÄÊúØÊåáÊ†á''Âíå''AIÁîüÊàêÁöÑ‰∫§ÊòìÁ≠ñÁï•''\")",
      "Bash(__NEW_LINE__ echo \"3. ÊåáÊ†áÂ∫ìÂåÖÂê´ÔºöRSIÁõ∏ÂØπÂº∫Âº±ÊåáÊ†á„ÄÅAIÂ∏ÉÊûóÂ∏¶ÊåáÊ†á (ÂÖ±2‰∏™)\")",
      "Bash(__NEW_LINE__ echo \"4. Á≠ñÁï•Â∫ìÂåÖÂê´ÔºöMACD‰∫§ÊòìÁ≠ñÁï•„ÄÅAI MACD‰∫§ÂèâÁ≠ñÁï•Á≠â (ÂÖ±4‰∏™)\")",
      "Bash(__NEW_LINE__ echo \"5. AIÂØπËØùÈ°µÈù¢ÁöÑÊåâÈíÆ‰ºöÊ†πÊçÆsession_typeÊô∫ËÉΩÂàáÊç¢ÊñáÊú¨\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== live_strategiesË°®ÁªìÊûÑ ==='')\ncursor.execute(''PRAGMA table_info(live_strategies)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    print(f''Âàó: {col[1]}, Á±ªÂûã: {col[2]}, ÈªòËÆ§ÂÄº: {col[4]}'')\n\nprint(''\\n=== Êü•ÁúãÂÆûÁõò‰∫§ÊòìÊï∞ÊçÆ ==='')\ncursor.execute(''SELECT id, strategy_id, name, status FROM live_strategies WHERE user_id=9'')\nlive_strategies = cursor.fetchall()\n\nprint(''Áî®Êà∑ID=9ÁöÑÂÆûÁõò‰∫§Êòì:'')\nfor live in live_strategies:\n    print(f''  ID: {live[0]}, Á≠ñÁï•ID: {live[1]}, ÂêçÁß∞: {live[2]}, Áä∂ÊÄÅ: {live[3]}'')\n\nprint(f''\\nÊÄªÂÆûÁõòÊï∞: {len(live_strategies)}'')\nrunning_count = sum(1 for live in live_strategies if live[3] == ''running'')\nprint(f''ËøêË°å‰∏≠ÂÆûÁõòÊï∞: {running_count}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== ÊµãËØïÁ≠ñÁï•Âà†Èô§‰øùÊä§ÈÄªËæë ==='')\n\n# Êü•ÁúãÁ≠ñÁï•ID=1ÁöÑÂÆûÁõòÁä∂ÊÄÅ\nprint(''Á≠ñÁï•ID=1ÁöÑÂÆûÁõòÊÉÖÂÜµ:'')\ncursor.execute(''SELECT id, name, status FROM live_strategies WHERE strategy_id=1'')\nlive_trades = cursor.fetchall()\n\nrunning_count = 0\nfor trade in live_trades:\n    status_emoji = ''üü¢'' if trade[2] == ''running'' else ''üü°'' if trade[2] == ''paused'' else ''‚ö™''\n    print(f''  {status_emoji} ÂÆûÁõòID: {trade[0]}, ÂêçÁß∞: {trade[1]}, Áä∂ÊÄÅ: {trade[2]}'')\n    if trade[2] in [''running'', ''paused'']:\n        running_count += 1\n\nprint(f''\\nÁ≠ñÁï•ID=1Êúâ {running_count} ‰∏™ËøêË°å‰∏≠/ÊöÇÂÅúÁöÑÂÆûÁõò'')\nprint(f''Ê†πÊçÆÈÄªËæëÔºåÁ≠ñÁï•ID=1 {\"\"‰∏çÂèØÂà†Èô§\"\" if running_count > 0 else \"\"ÂèØ‰ª•Âà†Èô§\"\"}'')\n\n# Êü•ÁúãÁ≠ñÁï•ID=11ÔºàAI MACD‰∫§ÂèâÁ≠ñÁï•ÔºâÁöÑÂÆûÁõòÁä∂ÊÄÅ\nprint(''\\nÁ≠ñÁï•ID=11ÁöÑÂÆûÁõòÊÉÖÂÜµ:'')\ncursor.execute(''SELECT id, name, status FROM live_strategies WHERE strategy_id=11'')\nlive_trades_11 = cursor.fetchall()\n\nrunning_count_11 = 0\nfor trade in live_trades_11:\n    status_emoji = ''üü¢'' if trade[2] == ''running'' else ''üü°'' if trade[2] == ''paused'' else ''‚ö™''\n    print(f''  {status_emoji} ÂÆûÁõòID: {trade[0]}, ÂêçÁß∞: {trade[1]}, Áä∂ÊÄÅ: {trade[2]}'')\n    if trade[2] in [''running'', ''paused'']:\n        running_count_11 += 1\n\nif running_count_11 == 0:\n    print(''  (Êó†ÂÆûÁõò‰∫§Êòì)'')\n    \nprint(f''\\nÁ≠ñÁï•ID=11Êúâ {running_count_11} ‰∏™ËøêË°å‰∏≠/ÊöÇÂÅúÁöÑÂÆûÁõò'')\nprint(f''Ê†πÊçÆÈÄªËæëÔºåÁ≠ñÁï•ID=11 {\"\"‰∏çÂèØÂà†Èô§\"\" if running_count_11 > 0 else \"\"ÂèØ‰ª•Âà†Èô§\"\"}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Áé∞ÊúâÁ≠ñÁï•‰ª£Á†ÅÁ§∫‰æã ==='')\ncursor.execute(''SELECT id, name, code FROM strategies WHERE user_id=9 LIMIT 3'')\nstrategies = cursor.fetchall()\n\nfor strategy in strategies:\n    print(f''\\nÁ≠ñÁï•ID: {strategy[0]}'')\n    print(f''Á≠ñÁï•ÂêçÁß∞: {strategy[1]}'')\n    print(''Á≠ñÁï•‰ª£Á†Å:'')\n    print(strategy[2])\n    print(''='' * 60)\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ AIËÅäÂ§©È°µÈù¢:\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ Áî®Êà∑ÊúçÂä°ÂÅ•Â∫∑Ê£ÄÊü•:\")",
      "Bash(__NEW_LINE__ echo \"‚úÖ ‰∫§ÊòìÊúçÂä°API:\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Ê£ÄÊü•live_strategiesË°®ÊòØÂê¶Â≠òÂú® ==='')\ncursor.execute(\"\"SELECT name FROM sqlite_master WHERE type=''table'' AND name=''live_strategies'';'')\ntables = cursor.fetchall()\n\nif tables:\n    print(''‚úÖ live_strategiesË°®Â≠òÂú®'')\n    \n    # Êü•ÁúãË°®ÁªìÊûÑ\n    cursor.execute(''PRAGMA table_info(live_strategies)'')\n    columns = cursor.fetchall()\n    print(''\\nË°®ÁªìÊûÑ:'')\n    for col in columns:\n        print(f''  {col[1]} {col[2]} (‰∏ªÈîÆ: {col[5]})'')\n    \n    # Êü•ÁúãÊï∞ÊçÆ\n    cursor.execute(''SELECT id, name, status FROM live_strategies LIMIT 5'')\n    data = cursor.fetchall()\n    print(f''\\nÁ§∫‰æãÊï∞ÊçÆ (ÂÖ±{len(data)}Êù°):'')\n    for row in data:\n        print(f''  ID: {row[0]}, ÂêçÁß∞: {row[1]}, Áä∂ÊÄÅ: {row[2]}'')\nelse:\n    print(''‚ùå live_strategiesË°®‰∏çÂ≠òÂú®'')\n    print(''ÈúÄË¶ÅÂàõÂª∫live_strategiesË°®'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Ê£ÄÊü•live_strategiesË°®ÊòØÂê¶Â≠òÂú® ==='')\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name=\"\"live_strategies\"\";'')\ntables = cursor.fetchall()\n\nif tables:\n    print(''‚úÖ live_strategiesË°®Â≠òÂú®'')\n    \n    # Êü•ÁúãË°®ÁªìÊûÑ\n    cursor.execute(''PRAGMA table_info(live_strategies)'')\n    columns = cursor.fetchall()\n    print(''\\nË°®ÁªìÊûÑ:'')\n    for col in columns:\n        print(f''  {col[1]} {col[2]} (‰∏ªÈîÆ: {col[5]})'')\n    \n    # Êü•ÁúãÊï∞ÊçÆ\n    cursor.execute(''SELECT id, name, status FROM live_strategies LIMIT 5'')\n    data = cursor.fetchall()\n    print(f''\\nÁ§∫‰æãÊï∞ÊçÆ (ÂÖ±{len(data)}Êù°):'')\n    for row in data:\n        print(f''  ID: {row[0]}, ÂêçÁß∞: {row[1]}, Áä∂ÊÄÅ: {row[2]}'')\nelse:\n    print(''‚ùå live_strategiesË°®‰∏çÂ≠òÂú®'')\n    print(''ÈúÄË¶ÅÂàõÂª∫live_strategiesË°®'')\n\nconn.close()\n\")",
      "Bash(__NEW_LINE__ echo \"=== ÊµãËØïËé∑ÂèñÂÆûÁõòÁ≠ñÁï•ÂàóË°® ===\")",
      "Bash(FRESH_JWT=\"eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VySWQiOiI5IiwiZW1haWwiOiJwdWJsaWN0ZXN0QGV4YW1wbGUuY29tIiwibWVtYmVyc2hpcExldmVsIjoicHJlbWl1bSIsInR5cGUiOiJhY2Nlc3MiLCJpYXQiOjE3NTYwNDQ1ODMsImV4cCI6MTc1NjEzMDk4MywiYXVkIjoidHJhZGVtZS1hcHAiLCJpc3MiOiJ0cmFkZW1lLXVzZXItc2VydmljZSJ9.8NPNzoT7NP2ZTb-f4yi7FsX9xGV-BVoOMh26YGxWMB4\")",
      "WebFetch(domain:www.okx.com)",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== Ê£ÄÊü•ÁÆ°ÁêÜÂëòÁõ∏ÂÖ≥Ë°®ÁªìÊûÑ ==='')\ncursor.execute(''SELECT name FROM sqlite_master WHERE type=\"\"table\"\" AND name LIKE \"\"%admin%\"\";'')\nadmin_tables = cursor.fetchall()\n\nif admin_tables:\n    print(''ÁÆ°ÁêÜÂëòÁõ∏ÂÖ≥Ë°®:'')\n    for table in admin_tables:\n        print(f''  - {table[0]}'')\n        cursor.execute(f''PRAGMA table_info({table[0]})'')\n        columns = cursor.fetchall()\n        for col in columns:\n            print(f''    {col[1]} {col[2]}'')\nelse:\n    print(''‚ùå Êú™ÊâæÂà∞ÁÆ°ÁêÜÂëòÁõ∏ÂÖ≥Ë°®'')\n\nprint(''\\n=== Ê£ÄÊü•Áî®Êà∑Ë°®‰∏≠ÁöÑÁÆ°ÁêÜÂëòÊùÉÈôêÂ≠óÊÆµ ==='')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    if ''admin'' in col[1].lower() or ''role'' in col[1].lower():\n        print(f''  - {col[1]} {col[2]}'')\n\nprint(''\\n=== Ê£ÄÊü•Áé∞ÊúâÁî®Êà∑ËßíËâ≤ÂàÜÂ∏É ==='')\ncursor.execute(''SELECT membership_level, COUNT(*) FROM users GROUP BY membership_level'')\nlevels = cursor.fetchall()\nfor level in levels:\n    print(f''  {level[0]}: {level[1]}‰∏™Áî®Êà∑'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nimport bcrypt\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\n# ‰ΩøÁî®bcryptÂä†ÂØÜÂØÜÁ†Å\npassword = ''admin123456''\nsalt = bcrypt.gensalt()\nhashed = bcrypt.hashpw(password.encode(''utf-8''), salt).decode(''utf-8'')\n\n# Êõ¥Êñ∞ÁÆ°ÁêÜÂëòË¥¶Êà∑ÂØÜÁ†Å\ncursor.execute(''UPDATE users SET password_hash = ? WHERE email = ?'', (hashed, ''admin@trademe.com''))\nconn.commit()\n\nprint(f''‚úÖ ÁÆ°ÁêÜÂëòÂØÜÁ†ÅÂ∑≤Êõ¥Êñ∞‰∏∫bcryptÂìàÂ∏å'')\nprint(f''ÈÇÆÁÆ±: admin@trademe.com'')\nprint(f''ÂØÜÁ†Å: admin123456'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== üìß ÈÇÆÁÆ±È™åËØÅÁä∂ÊÄÅÂÆö‰πâËØ¶Ëß£ ==='')\nprint()\n\nprint(''üìã Êï∞ÊçÆÂ∫ìÂ≠óÊÆµÂÆö‰πâ:'')\ncursor.execute(''PRAGMA table_info(users)'')\ncolumns = cursor.fetchall()\nfor col in columns:\n    if ''email_verified'' in col[1].lower():\n        print(f''  Â≠óÊÆµÂêç: {col[1]}'')\n        print(f''  Êï∞ÊçÆÁ±ªÂûã: {col[2]}'')\n        print(f''  ÈªòËÆ§ÂÄº: {col[4] if col[4] else \"\"FALSE\"\"}'')\n        print()\n\nprint(''üìä ÂΩìÂâçÁî®Êà∑È™åËØÅÁä∂ÊÄÅÁªüËÆ°:'')\ncursor.execute(''SELECT email_verified, COUNT(*) as count FROM users GROUP BY email_verified'')\nverification_stats = cursor.fetchall()\n\ntotal_users = 0\nverified_count = 0\nfor status in verification_stats:\n    is_verified = bool(status[0])  # SQLite‰∏≠ 1=True, 0=False\n    count = status[1]\n    total_users += count\n    if is_verified:\n        verified_count += count\n    status_text = ''‚úÖ Â∑≤È™åËØÅ'' if is_verified else ''‚è≥ ÂæÖÈ™åËØÅ''\n    print(f''  {status_text}: {count} ‰∏™Áî®Êà∑'')\n\nprint(f''\\nüìà È™åËØÅÁéá: {verified_count}/{total_users} = {(verified_count/total_users*100):.1f}%'')\n\nprint(''\\nüë• ÂÖ∑‰ΩìÁî®Êà∑È™åËØÅÁä∂ÊÄÅÁ§∫‰æã:'')\ncursor.execute(''SELECT username, email, email_verified, created_at FROM users ORDER BY created_at DESC LIMIT 10'')\nusers = cursor.fetchall()\n\nfor user in users:\n    username, email, email_verified, created_at = user\n    status_emoji = ''‚úÖ'' if email_verified else ''‚è≥''\n    status_text = ''Â∑≤È™åËØÅ'' if email_verified else ''ÂæÖÈ™åËØÅ''\n    print(f''  {status_emoji} {username} ({email}) - {status_text}'')\n\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"file:/root/trademe/data/trademe.db\" npx prisma db push --skip-generate)",
      "WebFetch(domain:43.167.252.120)",
      "Bash(npx tsc:*)",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT id, username, email, membership_level FROM users WHERE email = \"\"admin@trademe.com\"\"'')\nadmin_user = cursor.fetchone()\nif admin_user:\n    print(f''Admin user found: ID={admin_user[0]}, Username={admin_user[1]}, Email={admin_user[2]}, Level={admin_user[3]}'')\nelse:\n    print(''Admin user not found'')\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\ncursor.execute(''SELECT username, email, created_at, last_login_at FROM users LIMIT 3'')\nusers = cursor.fetchall()\nprint(''=== Database datetime format check ==='')\nfor user in users:\n    print(f''Username: {user[0]}, Email: {user[1]}'')\n    print(f''  created_at: {user[2]} (type: {type(user[2])})'')\n    print(f''  last_login_at: {user[3]} (type: {type(user[3])})'')\n    print()\nconn.close()\n\")",
      "Bash(DATABASE_URL=\"sqlite+aiosqlite:////root/trademe/data/trademe.db\" python3 -c \"\nimport sqlite3\nimport hashlib\nfrom datetime import datetime\n\nconn = sqlite3.connect(''/root/trademe/data/trademe.db'')\ncursor = conn.cursor()\n\nprint(''=== AdminË¥¶Êà∑ÂØÜÁ†ÅÂéÜÂè≤ËÆ∞ÂΩïÂàÜÊûê ==='')\n\n# Êü•ËØ¢adminË¥¶Êà∑ÁöÑÂØÜÁ†ÅÂìàÂ∏å\ncursor.execute(''SELECT id, username, email, password_hash, created_at, updated_at FROM users WHERE email = \"\"admin@trademe.com\"\"'')\nadmin_info = cursor.fetchone()\n\nif admin_info:\n    user_id, username, email, password_hash, created_at, updated_at = admin_info\n    print(f''üë§ Áî®Êà∑ID: {user_id}'')\n    print(f''üìß ÈÇÆÁÆ±: {email}'')\n    print(f''üîê ÂΩìÂâçÂØÜÁ†ÅÂìàÂ∏å: {password_hash[:50]}...'')\n    print(f''üìÖ ÂàõÂª∫Êó∂Èó¥: {created_at}'')\n    print(f''üîÑ Êõ¥Êñ∞Êó∂Èó¥: {updated_at}'')\n    \n    # Ê£ÄÊü•ÂØÜÁ†ÅÂìàÂ∏åÊ†ºÂºè\n    if password_hash.startswith(''$2b$'') or password_hash.startswith(''$2a$''):\n        print(''üîí ÂØÜÁ†ÅÊ†ºÂºè: bcryptÂìàÂ∏å (ÂÆâÂÖ®)'')\n    elif len(password_hash) == 64:\n        print(''üîí ÂØÜÁ†ÅÊ†ºÂºè: ÂèØËÉΩÊòØSHA256ÂìàÂ∏å'')\n    else:\n        print(''üîí ÂØÜÁ†ÅÊ†ºÂºè: Êú™Áü•Ê†ºÂºè'')\n        \n    print()\n    print(''=== Êé®ÊµãÁöÑÂØÜÁ†ÅÂéÜÂè≤ÂèòÊõ¥Êó∂Èó¥Á∫ø ==='')\n    print(''1. 2025-08-21: password123 (ÂàùÂßãÂºÄÂèëÈò∂ÊÆµ)'')\n    print(''2. 2025-08-22: Admin123! (create_admin.jsËÑöÊú¨ËÆæÁΩÆ)'')  \n    print(''3. 2025-08-24: admin123456 (bcryptÂä†ÂØÜÂçáÁ∫ß)'')\n    print(''4. ÂΩìÂâçÁîüÊïà: admin123456'')\n\nconn.close()\n\")",
      "Bash(WALLET_MASTER_KEY=\"hgu0_VGHge-o5D8xXOOe9A9UdXi3xm5qmcK0HKej89E\" python3 test_wallet_generation.py)",
      "Bash(WALLET_MASTER_KEY=\"hgu0_VGHge-o5D8xXOOe9A9UdXi3xm5qmcK0HKej89E\" python3 test_wallet_generation.py cleanup)",
      "Bash(WALLET_MASTER_KEY=\"hgu0_VGHge-o5D8xXOOe9A9UdXi3xm5qmcK0HKej89E\" python3 test_smart_allocator.py)",
      "Bash(WALLET_MASTER_KEY=\"hgu0_VGHge-o5D8xXOOe9A9UdXi3xm5qmcK0HKej89E\" python3 -c \"\nimport asyncio\nimport sys\nsys.path.append(''.'')\nfrom app.database import AsyncSessionLocal\nfrom app.services.smart_wallet_allocator import SmartWalletAllocator\n\nasync def test_stats():\n    async with AsyncSessionLocal() as db:\n        allocator = SmartWalletAllocator(db)\n        stats = await allocator.get_allocation_statistics()\n        print(''üìä ÂΩìÂâçÈí±ÂåÖÊ±†Áä∂ÊÄÅ:'')\n        print(f''  ÊÄªÈí±ÂåÖÊï∞: {stats[\"\"total_wallets\"\"]}'')\n        print(f''  ÂèØÁî®Èí±ÂåÖ: {stats[\"\"available_wallets\"\"]}'')\n        print(f''  Âà©Áî®Áéá: {stats[\"\"utilization_rate\"\"]:.1f}%'')\n        print(f''  Áä∂ÊÄÅÂàÜÂ∏É: {stats[\"\"status_distribution\"\"]}'')\n        print(f''  È£éÈô©ÂàÜÂ∏É: {stats[\"\"risk_distribution\"\"]}'')\n\nasyncio.run(test_stats())\n\")"
    ],
    "deny": [],
    "ask": [],
    "additionalDirectories": [
      "/root",
      "/var/www/html",
      "/etc/nginx/sites-enabled"
    ]
  }
}