import React, { useState, useEffect } from 'react'
import { useNavigate } from 'react-router-dom'
import { useUserInfo, useWebSocketStatus, useGlobalLoading } from '../store'
import toast from 'react-hot-toast'

interface Strategy {
  id: string
  name: string
  description: string
  status: 'running' | 'stopped' | 'paused'
  pair: string
  profit: string
  profitPercent: number
  lastUpdate: string
  createdAt: string
  runningTime?: string
  totalTrades?: number
  winRate?: number
}

const StrategiesPage: React.FC = () => {
  const navigate = useNavigate()
  const { user, isPremium } = useUserInfo()
  const { isConnected } = useWebSocketStatus()
  const { isLoading } = useGlobalLoading()
  
  const [showCreateModal, setShowCreateModal] = useState(false)
  const [selectedStrategy, setSelectedStrategy] = useState<Strategy | null>(null)
  const [searchQuery, setSearchQuery] = useState('')
  const [statusFilter, setStatusFilter] = useState<'all' | 'running' | 'stopped' | 'paused'>('all')
  const [viewMode, setViewMode] = useState<'list' | 'card'>('list')
  
  // 模拟策略数据
  const [strategies, setStrategies] = useState<Strategy[]>([
    {
      id: '1',
      name: 'RSI 均值回归策略',
      description: '基于RSI指标的均值回归交易策略，适用于震荡市场',
      status: 'running',
      pair: 'BTC/USDT',
      profit: '+2,847.32',
      profitPercent: 12.3,
      lastUpdate: '2024-01-15 14:30:25',
      createdAt: '2024-01-10 09:00:00',
      runningTime: '5天 12小时',
      totalTrades: 28,
      winRate: 67.8
    },
    {
      id: '2',
      name: 'MACD 趋势跟踪',
      description: '使用MACD指标捕捉价格趋势，适合中长期投资',
      status: 'stopped',
      pair: 'ETH/USDT',
      profit: '+1,456.78',
      profitPercent: 8.7,
      lastUpdate: '2024-01-14 16:45:10',
      createdAt: '2024-01-08 15:30:00',
      runningTime: '6天 8小时',
      totalTrades: 15,
      winRate: 73.3
    },
    {
      id: '3',
      name: '网格交易策略',
      description: '自动网格交易，利用价格波动实现稳定收益',
      status: 'running',
      pair: 'BNB/USDT',
      profit: '+3,284.56',
      profitPercent: 15.8,
      lastUpdate: '2024-01-15 15:20:45',
      createdAt: '2024-01-05 10:15:00',
      runningTime: '10天 5小时',
      totalTrades: 42,
      winRate: 71.4
    },
    {
      id: '4',
      name: '布林带突破策略',
      description: '基于布林带指标的突破交易策略',
      status: 'paused',
      pair: 'SOL/USDT',
      profit: '+890.34',
      profitPercent: 4.2,
      lastUpdate: '2024-01-13 20:15:30',
      createdAt: '2024-01-12 14:00:00',
      runningTime: '1天 6小时',
      totalTrades: 8,
      winRate: 62.5
    }
  ])

  // 过滤策略
  const filteredStrategies = strategies.filter(strategy => {
    const matchesSearch = strategy.name.toLowerCase().includes(searchQuery.toLowerCase()) ||
                         strategy.description?.toLowerCase().includes(searchQuery.toLowerCase())
    const matchesStatus = statusFilter === 'all' || strategy.status === statusFilter
    return matchesSearch && matchesStatus
  })
  
  // 统计数据
  const stats = {
    total: strategies.length,
    running: strategies.filter(s => s.status === 'running').length,
    stopped: strategies.filter(s => s.status === 'stopped').length,
    paused: strategies.filter(s => s.status === 'paused').length,
    totalProfit: strategies.reduce((sum, s) => sum + parseFloat(s.profit.replace(/[+,]/g, '')), 0),
    totalTrades: strategies.reduce((sum, s) => sum + (s.totalTrades || 0), 0),
    avgWinRate: strategies.reduce((sum, s) => sum + (s.winRate || 0), 0) / strategies.length
  }

  const handleCreateStrategy = () => {
    if (!isPremium) {
      toast.error('创建策略需要升级到高级版本')
      return
    }
    navigate('/strategy/create')
  }

  const handleEditStrategy = (strategy: Strategy) => {
    setSelectedStrategy(strategy)
    navigate(`/strategy/edit/${strategy.id}`)
  }

  const handleRunBacktest = (strategy: Strategy) => {
    setSelectedStrategy(strategy)
    navigate(`/backtest?strategy=${strategy.id}`)
  }

  const handleStartStrategy = (strategy: Strategy) => {
    if (!isPremium) {
      toast.error('启动策略需要高级版本')
      return
    }
    
    setStrategies(prev => prev.map(s => 
      s.id === strategy.id ? { ...s, status: 'running' as const } : s
    ))
    toast.success(`策略 "${strategy.name}" 已启动`)
  }

  const handleStopStrategy = (strategy: Strategy) => {
    setStrategies(prev => prev.map(s => 
      s.id === strategy.id ? { ...s, status: 'stopped' as const } : s
    ))
    toast.success(`策略 "${strategy.name}" 已停止`)
  }

  const handlePauseStrategy = (strategy: Strategy) => {
    setStrategies(prev => prev.map(s => 
      s.id === strategy.id ? { ...s, status: 'paused' as const } : s
    ))
    toast.success(`策略 "${strategy.name}" 已暂停`)
  }

  const handleDeleteStrategy = (strategy: Strategy) => {
    if (window.confirm(`确定要删除策略 "${strategy.name}" 吗？该操作不可恢复。`)) {
      setStrategies(prev => prev.filter(s => s.id !== strategy.id))
      toast.success('策略已删除')
    }
  }
  
  const getStatusColor = (status: Strategy['status']) => {
    switch (status) {
      case 'running': return 'bg-green-100 text-green-800'
      case 'stopped': return 'bg-gray-100 text-gray-800'
      case 'paused': return 'bg-yellow-100 text-yellow-800'
      default: return 'bg-gray-100 text-gray-800'
    }
  }
  
  const getStatusText = (status: Strategy['status']) => {
    switch (status) {
      case 'running': return '运行中'
      case 'stopped': return '已停止'
      case 'paused': return '已暂停'
      default: return '未知'
    }
  }

  return (
    <>
      {/* 策略交易页面内容 */}
        {/* Header */}
        <header className="py-4 px-8 flex justify-between border-b border-gray-200">
          {/* Logo */}
          <div className="flex items-center">
            <div className="w-7 h-7 rounded-full bg-brand-500 flex items-center justify-center mr-3">
              <span className="text-white font-bold text-sm">T</span>
            </div>
            <h1 className="text-xl font-bold text-brand-500">Trademe</h1>
          </div>
          
          {/* Navigation */}
          <nav className="flex gap-2">
            <button onClick={() => navigate('/')} className="nav-item">
              首页
            </button>
            <button className="nav-item active">
              策略交易
            </button>
            <button onClick={() => navigate('/trading')} className="nav-item">
              图表交易
            </button>
            <button onClick={() => navigate('/api-keys')} className="nav-item">
              API管理
            </button>
            <button onClick={() => navigate('/insights')} className="nav-item">
              交易心得
            </button>
            <button onClick={() => navigate('/profile')} className="nav-item">
              账户中心
            </button>
          </nav>
          
          {/* User Profile */}
          <div className="flex items-center space-x-4">
            {/* 连接状态 */}
            <div className="flex items-center space-x-2 text-sm">
              <div className={`w-2 h-2 rounded-full ${
                isConnected ? 'bg-green-500' : 'bg-red-500'
              }`}></div>
              <span className="text-gray-600">
                {isConnected ? '策略服务已连接' : '策略服务断开'}
              </span>
            </div>
            
            <div className="w-9 h-9 rounded-full bg-gray-200 overflow-hidden cursor-pointer">
              {user?.avatar_url ? (
                <img 
                  src={user.avatar_url} 
                  alt="User avatar" 
                  className="w-full h-full object-cover"
                />
              ) : (
                <div className="w-full h-full flex items-center justify-center bg-brand-100 text-brand-600 font-medium">
                  {user?.username?.charAt(0).toUpperCase() || 'U'}
                </div>
              )}
            </div>
          </div>
        </header>

        {/* 主要内容 */}
        <main className="p-6">
          {/* 统计卡片 */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4 mb-6">
            <div className="bg-gradient-to-r from-blue-50 to-blue-100 rounded-xl p-4 border border-blue-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-blue-600">策略总数</p>
                  <p className="text-2xl font-bold text-blue-900">{stats.total}</p>
                </div>
                <div className="w-10 h-10 bg-blue-500 rounded-lg flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                </div>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-green-50 to-green-100 rounded-xl p-4 border border-green-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-green-600">运行中</p>
                  <p className="text-2xl font-bold text-green-900">{stats.running}</p>
                </div>
                <div className="w-10 h-10 bg-green-500 rounded-lg flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M14.828 14.828a4 4 0 01-5.656 0M9 10h1.586a1 1 0 01.707.293l2.414 2.414a1 1 0 00.707.293H15M9 10V9a2 2 0 012-2h2a2 2 0 012 2v1M9 10v5a2 2 0 002 2h2a2 2 0 002-2v-5m-6 0h6" />
                  </svg>
                </div>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-purple-50 to-purple-100 rounded-xl p-4 border border-purple-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-purple-600">总收益</p>
                  <p className="text-2xl font-bold text-purple-900">+{stats.totalProfit.toLocaleString()}</p>
                </div>
                <div className="w-10 h-10 bg-purple-500 rounded-lg flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M13 7h8m0 0v8m0-8l-8 8-4-4-6 6" />
                  </svg>
                </div>
              </div>
            </div>
            
            <div className="bg-gradient-to-r from-orange-50 to-orange-100 rounded-xl p-4 border border-orange-200">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm font-medium text-orange-600">平均胜率</p>
                  <p className="text-2xl font-bold text-orange-900">{stats.avgWinRate.toFixed(1)}%</p>
                </div>
                <div className="w-10 h-10 bg-orange-500 rounded-lg flex items-center justify-center">
                  <svg className="w-5 h-5 text-white" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 12l2 2 4-4M7.835 4.697a3.42 3.42 0 001.946-.806 3.42 3.42 0 014.438 0 3.42 3.42 0 001.946.806 3.42 3.42 0 013.138 3.138 3.42 3.42 0 00.806 1.946 3.42 3.42 0 010 4.438 3.42 3.42 0 00-.806 1.946 3.42 3.42 0 01-3.138 3.138 3.42 3.42 0 00-1.946.806 3.42 3.42 0 01-4.438 0 3.42 3.42 0 00-1.946-.806 3.42 3.42 0 01-3.138-3.138 3.42 3.42 0 00-.806-1.946 3.42 3.42 0 010-4.438 3.42 3.42 0 00.806-1.946 3.42 3.42 0 013.138-3.138z" />
                  </svg>
                </div>
              </div>
            </div>
          </div>
          
          {/* 选项卡 */}
          <section className="mb-6">
            <div className="flex border-b border-gray-200">
              <button className="px-6 py-3 font-medium border-b-2 border-brand-500 text-brand-600">
                实盘管理
              </button>
              <button 
                onClick={() => navigate('/backtest')}
                className="px-6 py-3 font-medium text-gray-500 hover:text-gray-700 transition-colors"
              >
                回测管理
              </button>
            </div>
          </section>

          {/* 策略管理区域 */}
          <section className="bg-white rounded-xl shadow-sm border border-gray-100">
            <div className="p-6 border-b border-gray-100">
              <div className="flex justify-between items-start mb-4">
                <div>
                  <h2 className="text-xl font-bold text-gray-900">策略列表</h2>
                  <p className="text-sm text-gray-500 mt-1">管理您的交易策略，监控实时表现</p>
                </div>
                <button
                  onClick={handleCreateStrategy}
                  className="px-4 py-2 bg-brand-500 text-white rounded-lg font-medium flex items-center hover:bg-brand-600 transition-colors"
                >
                  <svg className="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M12 4v16m8-8H4" />
                  </svg>
                  {isPremium ? '创建策略' : '升级创建'}
                </button>
              </div>
              
              {/* 搜索和过滤栏 */}
              <div className="flex flex-col sm:flex-row gap-4 items-center justify-between">
                <div className="flex items-center space-x-4 flex-1">
                  {/* 搜索框 */}
                  <div className="relative flex-1 max-w-md">
                    <input
                      type="text"
                      placeholder="搜索策略名称或描述..."
                      value={searchQuery}
                      onChange={(e) => setSearchQuery(e.target.value)}
                      className="w-full pl-10 pr-4 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent"
                    />
                    <svg className="absolute left-3 top-2.5 w-4 h-4 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                      <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
                    </svg>
                  </div>
                  
                  {/* 状态过滤 */}
                  <select
                    value={statusFilter}
                    onChange={(e) => setStatusFilter(e.target.value as any)}
                    className="px-3 py-2 border border-gray-300 rounded-lg focus:ring-2 focus:ring-brand-500 focus:border-transparent"
                  >
                    <option value="all">全部状态</option>
                    <option value="running">运行中</option>
                    <option value="stopped">已停止</option>
                    <option value="paused">已暂停</option>
                  </select>
                </div>
                
                <div className="flex items-center space-x-2">
                  {/* 视图切换 */}
                  <div className="flex border border-gray-300 rounded-lg overflow-hidden">
                    <button
                      onClick={() => setViewMode('list')}
                      className={`px-3 py-2 text-sm transition-colors ${
                        viewMode === 'list'
                          ? 'bg-brand-500 text-white'
                          : 'bg-white text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6h16M4 10h16M4 14h16M4 18h16" />
                      </svg>
                    </button>
                    <button
                      onClick={() => setViewMode('card')}
                      className={`px-3 py-2 text-sm transition-colors ${
                        viewMode === 'card'
                          ? 'bg-brand-500 text-white'
                          : 'bg-white text-gray-700 hover:bg-gray-50'
                      }`}
                    >
                      <svg className="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                        <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M4 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2V6zM14 6a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2V6zM4 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2H6a2 2 0 01-2-2v-2zM14 16a2 2 0 012-2h2a2 2 0 012 2v2a2 2 0 01-2 2h-2a2 2 0 01-2-2v-2z" />
                      </svg>
                    </button>
                  </div>
                </div>
              </div>
            </div>
            
            {/* 策略列表内容 */}
            <div className={viewMode === 'list' ? 'overflow-x-auto' : 'p-6'}>
              {viewMode === 'list' ? (
                <table className="w-full">
                  <thead className="bg-gray-50">
                    <tr>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        策略信息
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        状态
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        交易对
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        收益
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        表现
                      </th>
                      <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">
                        操作
                      </th>
                    </tr>
                  </thead>
                  <tbody className="bg-white divide-y divide-gray-200">
                    {filteredStrategies.map((strategy) => (
                      <tr key={strategy.id} className="hover:bg-gray-50 transition-colors">
                        <td className="px-6 py-4">
                          <div className="flex flex-col">
                            <div className="font-medium text-gray-900">{strategy.name}</div>
                            <div className="text-sm text-gray-500 max-w-xs truncate">{strategy.description}</div>
                            <div className="text-xs text-gray-400 mt-1">创建于 {strategy.createdAt}</div>
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            getStatusColor(strategy.status)
                          }`}>
                            {getStatusText(strategy.status)}
                          </span>
                          {strategy.runningTime && (
                            <div className="text-xs text-gray-500 mt-1">运行 {strategy.runningTime}</div>
                          )}
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="font-medium text-gray-900">{strategy.pair}</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className={`font-semibold ${
                            strategy.profitPercent >= 0 ? 'text-green-600' : 'text-red-600'
                          }`}>
                            {strategy.profit} USDT
                          </div>
                          <div className={`text-sm ${
                            strategy.profitPercent >= 0 ? 'text-green-500' : 'text-red-500'
                          }`}>
                            {strategy.profitPercent > 0 ? '+' : ''}{strategy.profitPercent}%
                          </div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="text-sm text-gray-900">交易 {strategy.totalTrades} 笔</div>
                          <div className="text-sm text-gray-500">胜率 {strategy.winRate}%</div>
                        </td>
                        <td className="px-6 py-4 whitespace-nowrap">
                          <div className="flex items-center space-x-2">
                            {strategy.status === 'running' ? (
                              <>
                                <button 
                                  onClick={() => handlePauseStrategy(strategy)}
                                  className="px-3 py-1 rounded bg-yellow-100 text-yellow-700 hover:bg-yellow-200 transition-colors text-xs"
                                >
                                  暂停
                                </button>
                                <button 
                                  onClick={() => handleStopStrategy(strategy)}
                                  className="px-3 py-1 rounded bg-red-100 text-red-700 hover:bg-red-200 transition-colors text-xs"
                                >
                                  停止
                                </button>
                              </>
                            ) : strategy.status === 'paused' ? (
                              <>
                                <button 
                                  onClick={() => handleStartStrategy(strategy)}
                                  className="px-3 py-1 rounded bg-green-100 text-green-700 hover:bg-green-200 transition-colors text-xs"
                                >
                                  继续
                                </button>
                                <button 
                                  onClick={() => handleStopStrategy(strategy)}
                                  className="px-3 py-1 rounded bg-red-100 text-red-700 hover:bg-red-200 transition-colors text-xs"
                                >
                                  停止
                                </button>
                              </>
                            ) : (
                              <button 
                                onClick={() => handleStartStrategy(strategy)}
                                className="px-3 py-1 rounded bg-green-100 text-green-700 hover:bg-green-200 transition-colors text-xs"
                              >
                                启动
                              </button>
                            )}
                            <button 
                              onClick={() => handleRunBacktest(strategy)}
                              className="px-3 py-1 rounded bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors text-xs"
                            >
                              回测
                            </button>
                            <button 
                              onClick={() => handleEditStrategy(strategy)}
                              className="px-3 py-1 rounded bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors text-xs"
                            >
                              编辑
                            </button>
                            <button 
                              onClick={() => handleDeleteStrategy(strategy)}
                              className="px-3 py-1 rounded bg-red-100 text-red-700 hover:bg-red-200 transition-colors text-xs"
                            >
                              删除
                            </button>
                          </div>
                        </td>
                      </tr>
                    ))}
                  </tbody>
                </table>
              ) : (
                <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-6">
                  {filteredStrategies.map((strategy) => (
                    <div key={strategy.id} className="bg-white border border-gray-200 rounded-xl p-6 hover:shadow-lg transition-shadow">
                      <div className="flex items-start justify-between mb-4">
                        <div className="flex-1">
                          <h3 className="font-semibold text-gray-900 mb-1">{strategy.name}</h3>
                          <p className="text-sm text-gray-500 mb-2 line-clamp-2">{strategy.description}</p>
                          <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${
                            getStatusColor(strategy.status)
                          }`}>
                            {getStatusText(strategy.status)}
                          </span>
                        </div>
                      </div>
                      
                      <div className="space-y-3">
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">交易对:</span>
                          <span className="font-medium">{strategy.pair}</span>
                        </div>
                        
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">收益:</span>
                          <div className="text-right">
                            <div className={`font-semibold ${
                              strategy.profitPercent >= 0 ? 'text-green-600' : 'text-red-600'
                            }`}>
                              {strategy.profit} USDT
                            </div>
                            <div className={`text-xs ${
                              strategy.profitPercent >= 0 ? 'text-green-500' : 'text-red-500'
                            }`}>
                              {strategy.profitPercent > 0 ? '+' : ''}{strategy.profitPercent}%
                            </div>
                          </div>
                        </div>
                        
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">胜率:</span>
                          <span className="font-medium">{strategy.winRate}%</span>
                        </div>
                        
                        <div className="flex justify-between items-center">
                          <span className="text-sm text-gray-600">交易笔数:</span>
                          <span className="font-medium">{strategy.totalTrades}</span>
                        </div>
                        
                        {strategy.runningTime && (
                          <div className="flex justify-between items-center">
                            <span className="text-sm text-gray-600">运行时间:</span>
                            <span className="font-medium">{strategy.runningTime}</span>
                          </div>
                        )}
                      </div>
                      
                      <div className="mt-4 pt-4 border-t border-gray-100 flex flex-wrap gap-2">
                        {strategy.status === 'running' ? (
                          <>
                            <button 
                              onClick={() => handlePauseStrategy(strategy)}
                              className="flex-1 px-3 py-2 rounded bg-yellow-100 text-yellow-700 hover:bg-yellow-200 transition-colors text-sm"
                            >
                              暂停
                            </button>
                            <button 
                              onClick={() => handleStopStrategy(strategy)}
                              className="flex-1 px-3 py-2 rounded bg-red-100 text-red-700 hover:bg-red-200 transition-colors text-sm"
                            >
                              停止
                            </button>
                          </>
                        ) : (
                          <button 
                            onClick={() => handleStartStrategy(strategy)}
                            className="flex-1 px-3 py-2 rounded bg-green-100 text-green-700 hover:bg-green-200 transition-colors text-sm"
                          >
                            启动
                          </button>
                        )}
                        <button 
                          onClick={() => handleRunBacktest(strategy)}
                          className="px-3 py-2 rounded bg-blue-100 text-blue-700 hover:bg-blue-200 transition-colors text-sm"
                        >
                          回测
                        </button>
                        <button 
                          onClick={() => handleEditStrategy(strategy)}
                          className="px-3 py-2 rounded bg-gray-100 text-gray-700 hover:bg-gray-200 transition-colors text-sm"
                        >
                          编辑
                        </button>
                      </div>
                    </div>
                  ))}
                </div>
              )}
              
              {/* 空状态 */}
              {filteredStrategies.length === 0 && (
                <div className="text-center py-12">
                  <svg className="mx-auto h-12 w-12 text-gray-400 mb-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                    <path strokeLinecap="round" strokeLinejoin="round" strokeWidth={2} d="M9 5H7a2 2 0 00-2 2v10a2 2 0 002 2h8a2 2 0 002-2V7a2 2 0 00-2-2h-2M9 5a2 2 0 002 2h2a2 2 0 002-2M9 5a2 2 0 012-2h2a2 2 0 012 2" />
                  </svg>
                  <h3 className="text-lg font-medium text-gray-900 mb-2">
                    {searchQuery || statusFilter !== 'all' ? '没有找到匹配的策略' : '暂无策略'}
                  </h3>
                  <p className="text-gray-500 mb-6">
                    {searchQuery || statusFilter !== 'all' ? '请尝试修改搜索条件' : '开始创建您的第一个交易策略'}
                  </p>
                  {!searchQuery && statusFilter === 'all' && (
                    <button 
                      onClick={handleCreateStrategy}
                      className="px-6 py-3 bg-brand-500 text-white rounded-lg font-medium hover:bg-brand-600 transition-colors"
                    >
                      {isPremium ? '创建策略' : '升级后创建'}
                    </button>
                  )}
                </div>
              )}
            </div>
          </section>
        </main>
      </div>
    </div>
  )
}

export default StrategiesPage