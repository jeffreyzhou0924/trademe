import React, { useState, useEffect } from 'react';
import { Card, CardContent, CardHeader, CardTitle } from '@/components/ui/card';
import { Button } from '@/components/ui/button';
import { Badge } from '@/components/ui/badge';
import { Progress } from '@/components/ui/progress';
import { Tabs, TabsContent, TabsList, TabsTrigger } from '@/components/ui/tabs';
import { Calendar } from '@/components/ui/calendar';
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';
import { useAuthStore } from '@/store/authStore';
import { useToast } from '@/hooks/use-toast';
import { 
  Download, Database, Activity, AlertTriangle, CheckCircle, 
  Clock, TrendingUp, RefreshCw, Settings, BarChart3
} from 'lucide-react';

interface DataStats {
  kline_statistics: Array<{
    exchange: string;
    symbol_count: number;
    timeframe_count: number;
    total_records: number;
  }>;
}

interface DownloadTask {
  id: number;
  exchange: string;
  symbol: string;
  timeframe: string;
  status: 'pending' | 'running' | 'completed' | 'failed';
  progress: number;
  downloaded_records: number;
  total_records: number;
  started_at?: string;
  completed_at?: string;
  error_message?: string;
}

interface QualityReport {
  symbol: string;
  timeframe: string;
  quality_score: number;
  completeness: {
    completeness_percent: number;
    missing_count: number;
  };
  recommendation: string[];
}

const DataManagementPage = () => {
  const { token } = useAuthStore();
  const { toast } = useToast();
  
  // 状态管理
  const [dataStats, setDataStats] = useState<DataStats | null>(null);
  const [downloadTasks, setDownloadTasks] = useState<DownloadTask[]>([]);
  const [qualityReports, setQualityReports] = useState<QualityReport[]>([]);
  const [loading, setLoading] = useState(false);
  
  // 下载表单状态
  const [selectedExchange, setSelectedExchange] = useState('binance');
  const [selectedSymbol, setSelectedSymbol] = useState('BTC/USDT');
  const [selectedTimeframe, setSelectedTimeframe] = useState('1h');
  const [dateRange, setDateRange] = useState({
    start: new Date(Date.now() - 7 * 24 * 60 * 60 * 1000), // 7天前
    end: new Date()
  });

  const exchanges = ['binance', 'okx', 'huobi', 'bybit'];
  const symbols = ['BTC/USDT', 'ETH/USDT', 'BNB/USDT', 'ADA/USDT', 'SOL/USDT'];
  const timeframes = ['1m', '5m', '15m', '1h', '4h', '1d'];

  // 获取数据统计
  const fetchDataStats = async () => {
    try {
      const response = await fetch('/api/v1/data/storage/stats', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const result = await response.json();
      
      if (result.success) {
        setDataStats(result.data);
      }
    } catch (error) {
      console.error('获取数据统计失败:', error);
    }
  };

  // 获取下载任务列表
  const fetchDownloadTasks = async () => {
    try {
      const response = await fetch('/api/v1/data/download/tasks', {
        headers: { 'Authorization': `Bearer ${token}` }
      });
      const result = await response.json();
      
      if (result.success) {
        setDownloadTasks(result.data.tasks || []);
      }
    } catch (error) {
      console.error('获取下载任务失败:', error);
    }
  };

  // 启动历史数据下载
  const startDataDownload = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/v1/data/download/historical', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          exchange: selectedExchange,
          symbol: selectedSymbol,
          timeframe: selectedTimeframe,
          start_date: dateRange.start.toISOString(),
          end_date: dateRange.end.toISOString()
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast({
          title: "下载任务已启动",
          description: result.message,
        });
        
        // 刷新任务列表
        setTimeout(fetchDownloadTasks, 1000);
      } else {
        throw new Error(result.message || '下载启动失败');
      }
    } catch (error) {
      toast({
        title: "下载启动失败",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // 批量下载主要交易对
  const startBatchDownload = async () => {
    setLoading(true);
    try {
      const response = await fetch('/api/v1/data/download/batch/major-symbols', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'Authorization': `Bearer ${token}`
        },
        body: JSON.stringify({
          exchange: selectedExchange,
          timeframes: ['1h', '1d'],
          days_back: 30
        })
      });
      
      const result = await response.json();
      
      if (result.success) {
        toast({
          title: "批量下载已启动",
          description: result.message,
        });
        
        setTimeout(fetchDownloadTasks, 1000);
      }
    } catch (error) {
      toast({
        title: "批量下载失败",
        description: error.message,
        variant: "destructive"
      });
    } finally {
      setLoading(false);
    }
  };

  // 检查数据质量
  const checkDataQuality = async (exchange: string, symbol: string, timeframe: string) => {
    try {
      const response = await fetch(
        `/api/v1/data/quality/check/${exchange}/${symbol}/${timeframe}?check_days=7`,
        {
          headers: { 'Authorization': `Bearer ${token}` }
        }
      );
      
      const result = await response.json();
      
      if (result.success) {
        const report: QualityReport = result.data;
        setQualityReports(prev => {
          const filtered = prev.filter(r => 
            !(r.symbol === symbol && r.timeframe === timeframe)
          );
          return [...filtered, report];
        });
        
        toast({
          title: "质量检查完成",
          description: `${symbol} ${timeframe} 质量评分: ${report.quality_score.toFixed(1)}/100`,
        });
      }
    } catch (error) {
      toast({
        title: "质量检查失败",
        description: error.message,
        variant: "destructive"
      });
    }
  };

  // 组件挂载时获取数据
  useEffect(() => {
    fetchDataStats();
    fetchDownloadTasks();
    
    // 定时刷新任务状态
    const interval = setInterval(fetchDownloadTasks, 5000);
    return () => clearInterval(interval);
  }, []);

  // 渲染任务状态徽章
  const renderTaskStatus = (task: DownloadTask) => {
    const statusConfig = {
      pending: { color: 'bg-yellow-500', text: '等待中', icon: Clock },
      running: { color: 'bg-blue-500', text: '下载中', icon: Download },
      completed: { color: 'bg-green-500', text: '已完成', icon: CheckCircle },
      failed: { color: 'bg-red-500', text: '失败', icon: AlertTriangle }
    };
    
    const config = statusConfig[task.status];
    const Icon = config.icon;
    
    return (
      <Badge className={`${config.color} text-white`}>
        <Icon className="w-3 h-3 mr-1" />
        {config.text}
      </Badge>
    );
  };

  return (
    <div className="p-6 max-w-7xl mx-auto space-y-6">
      <div className="flex items-center justify-between">
        <h1 className="text-3xl font-bold">数据管理中心</h1>
        <Button onClick={fetchDataStats} variant="outline">
          <RefreshCw className="w-4 h-4 mr-2" />
          刷新数据
        </Button>
      </div>

      {/* 数据统计概览 */}
      <div className="grid grid-cols-1 md:grid-cols-3 gap-4">
        {dataStats?.kline_statistics.map((stat, index) => (
          <Card key={index}>
            <CardHeader className="pb-2">
              <CardTitle className="text-sm font-medium">
                {stat.exchange.toUpperCase()} 交易所
              </CardTitle>
            </CardHeader>
            <CardContent>
              <div className="space-y-2">
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">交易对数量:</span>
                  <span className="font-medium">{stat.symbol_count}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">时间框架:</span>
                  <span className="font-medium">{stat.timeframe_count}</span>
                </div>
                <div className="flex justify-between">
                  <span className="text-sm text-muted-foreground">K线记录:</span>
                  <span className="font-medium">{stat.total_records.toLocaleString()}</span>
                </div>
              </div>
            </CardContent>
          </Card>
        ))}
      </div>

      <Tabs defaultValue="download" className="w-full">
        <TabsList className="grid w-full grid-cols-4">
          <TabsTrigger value="download">数据下载</TabsTrigger>
          <TabsTrigger value="quality">质量监控</TabsTrigger>
          <TabsTrigger value="tasks">任务管理</TabsTrigger>
          <TabsTrigger value="settings">系统设置</TabsTrigger>
        </TabsList>

        {/* 数据下载标签页 */}
        <TabsContent value="download" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            
            {/* 单个数据下载 */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Download className="w-5 h-5 mr-2" />
                  单个数据下载
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium">交易所</label>
                    <Select value={selectedExchange} onValueChange={setSelectedExchange}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {exchanges.map(exchange => (
                          <SelectItem key={exchange} value={exchange}>
                            {exchange.toUpperCase()}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium">交易对</label>
                    <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>
                      <SelectTrigger>
                        <SelectValue />
                      </SelectTrigger>
                      <SelectContent>
                        {symbols.map(symbol => (
                          <SelectItem key={symbol} value={symbol}>
                            {symbol}
                          </SelectItem>
                        ))}
                      </SelectContent>
                    </Select>
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium">时间框架</label>
                  <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {timeframes.map(tf => (
                        <SelectItem key={tf} value={tf}>
                          {tf}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <div className="grid grid-cols-2 gap-4">
                  <div>
                    <label className="text-sm font-medium">开始日期</label>
                    <input
                      type="date"
                      className="w-full px-3 py-2 border rounded-md"
                      value={dateRange.start.toISOString().split('T')[0]}
                      onChange={(e) => setDateRange(prev => ({
                        ...prev,
                        start: new Date(e.target.value)
                      }))}
                    />
                  </div>
                  
                  <div>
                    <label className="text-sm font-medium">结束日期</label>
                    <input
                      type="date"
                      className="w-full px-3 py-2 border rounded-md"
                      value={dateRange.end.toISOString().split('T')[0]}
                      onChange={(e) => setDateRange(prev => ({
                        ...prev,
                        end: new Date(e.target.value)
                      }))}
                    />
                  </div>
                </div>

                <Button 
                  onClick={startDataDownload} 
                  disabled={loading}
                  className="w-full"
                >
                  {loading ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      启动下载中...
                    </>
                  ) : (
                    <>
                      <Download className="w-4 h-4 mr-2" />
                      开始下载
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>

            {/* 批量下载 */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Database className="w-5 h-5 mr-2" />
                  批量数据下载
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="bg-muted p-4 rounded-lg">
                  <h4 className="font-medium mb-2">预设方案</h4>
                  <div className="text-sm text-muted-foreground space-y-1">
                    <p>• 10个主要交易对 (BTC, ETH, BNB等)</p>
                    <p>• 2个时间框架 (1h, 1d)</p>
                    <p>• 最近30天历史数据</p>
                    <p>• 预计下载时间: 30-60分钟</p>
                  </div>
                </div>

                <div>
                  <label className="text-sm font-medium">目标交易所</label>
                  <Select value={selectedExchange} onValueChange={setSelectedExchange}>
                    <SelectTrigger>
                      <SelectValue />
                    </SelectTrigger>
                    <SelectContent>
                      {exchanges.map(exchange => (
                        <SelectItem key={exchange} value={exchange}>
                          {exchange.toUpperCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <Button 
                  onClick={startBatchDownload}
                  disabled={loading}
                  className="w-full"
                  variant="outline"
                >
                  {loading ? (
                    <>
                      <RefreshCw className="w-4 h-4 mr-2 animate-spin" />
                      启动批量下载中...
                    </>
                  ) : (
                    <>
                      <Database className="w-4 h-4 mr-2" />
                      批量下载主要交易对
                    </>
                  )}
                </Button>
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* 质量监控标签页 */}
        <TabsContent value="quality" className="space-y-6">
          <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
            
            {/* 质量检查面板 */}
            <Card>
              <CardHeader>
                <CardTitle className="flex items-center">
                  <Activity className="w-5 h-5 mr-2" />
                  数据质量检查
                </CardTitle>
              </CardHeader>
              <CardContent className="space-y-4">
                <div className="grid grid-cols-3 gap-2">
                  <Select value={selectedExchange} onValueChange={setSelectedExchange}>
                    <SelectTrigger>
                      <SelectValue placeholder="交易所" />
                    </SelectTrigger>
                    <SelectContent>
                      {exchanges.map(exchange => (
                        <SelectItem key={exchange} value={exchange}>
                          {exchange.toUpperCase()}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <Select value={selectedSymbol} onValueChange={setSelectedSymbol}>
                    <SelectTrigger>
                      <SelectValue placeholder="交易对" />
                    </SelectTrigger>
                    <SelectContent>
                      {symbols.map(symbol => (
                        <SelectItem key={symbol} value={symbol}>
                          {symbol}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                  
                  <Select value={selectedTimeframe} onValueChange={setSelectedTimeframe}>
                    <SelectTrigger>
                      <SelectValue placeholder="时间框架" />
                    </SelectTrigger>
                    <SelectContent>
                      {timeframes.map(tf => (
                        <SelectItem key={tf} value={tf}>
                          {tf}
                        </SelectItem>
                      ))}
                    </SelectContent>
                  </Select>
                </div>

                <Button 
                  onClick={() => checkDataQuality(selectedExchange, selectedSymbol, selectedTimeframe)}
                  className="w-full"
                  variant="outline"
                >
                  <BarChart3 className="w-4 h-4 mr-2" />
                  检查数据质量
                </Button>
              </CardContent>
            </Card>

            {/* 质量报告展示 */}
            <Card>
              <CardHeader>
                <CardTitle>质量报告</CardTitle>
              </CardHeader>
              <CardContent>
                {qualityReports.length === 0 ? (
                  <p className="text-muted-foreground text-center py-8">
                    暂无质量报告，请先执行质量检查
                  </p>
                ) : (
                  <div className="space-y-3">
                    {qualityReports.slice(0, 3).map((report, index) => (
                      <div key={index} className="border rounded-lg p-3">
                        <div className="flex justify-between items-center mb-2">
                          <span className="font-medium">
                            {report.symbol} {report.timeframe}
                          </span>
                          <Badge 
                            className={
                              report.quality_score >= 85 ? 'bg-green-500' :
                              report.quality_score >= 70 ? 'bg-yellow-500' : 'bg-red-500'
                            }
                          >
                            {report.quality_score.toFixed(1)}/100
                          </Badge>
                        </div>
                        
                        <div className="text-sm space-y-1">
                          <div className="flex justify-between">
                            <span>完整性:</span>
                            <span>{report.completeness.completeness_percent.toFixed(1)}%</span>
                          </div>
                          <div className="flex justify-between">
                            <span>缺失记录:</span>
                            <span>{report.completeness.missing_count}</span>
                          </div>
                        </div>
                        
                        {report.recommendation.length > 0 && (
                          <div className="mt-2 text-xs text-muted-foreground">
                            建议: {report.recommendation[0]}
                          </div>
                        )}
                      </div>
                    ))}
                  </div>
                )}
              </CardContent>
            </Card>
          </div>
        </TabsContent>

        {/* 任务管理标签页 */}
        <TabsContent value="tasks" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <TrendingUp className="w-5 h-5 mr-2" />
                下载任务监控
              </CardTitle>
            </CardHeader>
            <CardContent>
              {downloadTasks.length === 0 ? (
                <p className="text-muted-foreground text-center py-8">
                  暂无下载任务
                </p>
              ) : (
                <div className="space-y-3">
                  {downloadTasks.map((task) => (
                    <div key={task.id} className="border rounded-lg p-4">
                      <div className="flex justify-between items-start mb-3">
                        <div>
                          <h4 className="font-medium">
                            {task.exchange.toUpperCase()} {task.symbol} {task.timeframe}
                          </h4>
                          <p className="text-sm text-muted-foreground">
                            任务ID: {task.id}
                          </p>
                        </div>
                        {renderTaskStatus(task)}
                      </div>

                      {task.status === 'running' && (
                        <div className="mb-3">
                          <div className="flex justify-between text-sm mb-1">
                            <span>下载进度</span>
                            <span>{task.progress.toFixed(1)}%</span>
                          </div>
                          <Progress value={task.progress} className="h-2" />
                          <div className="flex justify-between text-xs text-muted-foreground mt-1">
                            <span>已下载: {task.downloaded_records.toLocaleString()}</span>
                            <span>预计: {task.total_records.toLocaleString()}</span>
                          </div>
                        </div>
                      )}

                      {task.status === 'completed' && (
                        <div className="text-sm text-green-600">
                          ✅ 已完成 {task.downloaded_records.toLocaleString()} 条记录下载
                        </div>
                      )}

                      {task.status === 'failed' && task.error_message && (
                        <div className="text-sm text-red-600">
                          ❌ 失败原因: {task.error_message}
                        </div>
                      )}

                      <div className="flex justify-between text-xs text-muted-foreground mt-2">
                        <span>
                          开始: {task.started_at ? new Date(task.started_at).toLocaleString() : '-'}
                        </span>
                        <span>
                          完成: {task.completed_at ? new Date(task.completed_at).toLocaleString() : '-'}
                        </span>
                      </div>
                    </div>
                  ))}
                </div>
              )}
            </CardContent>
          </Card>
        </TabsContent>

        {/* 系统设置标签页 */}
        <TabsContent value="settings" className="space-y-6">
          <Card>
            <CardHeader>
              <CardTitle className="flex items-center">
                <Settings className="w-5 h-5 mr-2" />
                数据管理配置
              </CardTitle>
            </CardHeader>
            <CardContent className="space-y-4">
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div className="space-y-3">
                  <h4 className="font-medium">存储配置</h4>
                  <div className="text-sm space-y-2">
                    <div className="flex justify-between">
                      <span>K线数据保留:</span>
                      <span>365天</span>
                    </div>
                    <div className="flex justify-between">
                      <span>Tick数据保留:</span>
                      <span>30天</span>
                    </div>
                    <div className="flex justify-between">
                      <span>压缩阈值:</span>
                      <span>1小时</span>
                    </div>
                  </div>
                </div>
                
                <div className="space-y-3">
                  <h4 className="font-medium">质量标准</h4>
                  <div className="text-sm space-y-2">
                    <div className="flex justify-between">
                      <span>最低完整性:</span>
                      <span>95%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>最大价格波动:</span>
                      <span>50%</span>
                    </div>
                    <div className="flex justify-between">
                      <span>时间缺口上限:</span>
                      <span>5分钟</span>
                    </div>
                  </div>
                </div>
              </div>
              
              <div className="pt-4 border-t">
                <h4 className="font-medium mb-3">系统状态</h4>
                <div className="grid grid-cols-2 gap-4 text-sm">
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                    <span>数据下载服务: 正常</span>
                  </div>
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                    <span>质量监控: 正常</span>
                  </div>
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
                    <span>自动同步: 暂停</span>
                  </div>
                  <div className="flex items-center">
                    <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                    <span>数据库: 正常</span>
                  </div>
                </div>
              </div>
            </CardContent>
          </Card>
        </TabsContent>
      </Tabs>
    </div>
  );
};

export default DataManagementPage;