{
  "test_config": {
    "strategy_code": "\n# \u7b80\u5355MACD\u7b56\u7565\u6d4b\u8bd5\nclass MACDStrategy(BaseStrategy):\n    def on_data(self, data):\n        # \u83b7\u53d6\u4ef7\u683c\u6570\u636e\n        if len(data) < 30:\n            return None  # \u6570\u636e\u4e0d\u8db3\n        \n        # \u4f7f\u7528\u7cfb\u7edf\u5185\u7f6e\u65b9\u6cd5\u83b7\u53d6MACD\u6307\u6807\n        macd_data = self.get_indicator('MACD', data, fast=12, slow=26, signal=9)\n        if not macd_data or len(macd_data) < 2:\n            return None\n        \n        current_macd = macd_data[-1]\n        prev_macd = macd_data[-2]\n        \n        # \u83b7\u53d6\u5f53\u524d\u4ef7\u683c\n        current_price = data['close'].iloc[-1]\n        \n        # MACD\u7b56\u7565\u903b\u8f91\uff1aMACD\u7ebf\u4e0a\u7a7f\u4fe1\u53f7\u7ebf\u4e70\u5165\uff0c\u4e0b\u7a7f\u5356\u51fa\n        if current_macd['macd'] > current_macd['signal'] and prev_macd['macd'] <= prev_macd['signal']:\n            return {\n                'action': 'buy',\n                'price': current_price,\n                'size': 0.3,  # 30%\u4ed3\u4f4d\n                'reason': 'MACD\u91d1\u53c9\u4e70\u5165\u4fe1\u53f7'\n            }\n        elif current_macd['macd'] < current_macd['signal'] and prev_macd['macd'] >= prev_macd['signal']:\n            return {\n                'action': 'sell', \n                'price': current_price,\n                'size': 0.5,  # \u5356\u51fa50%\u6301\u4ed3\n                'reason': 'MACD\u6b7b\u53c9\u5356\u51fa\u4fe1\u53f7'\n            }\n        \n        return None  # \u65e0\u64cd\u4f5c\u4fe1\u53f7\n",
    "exchange": "okx",
    "symbols": [
      "BTC/USDT"
    ],
    "timeframes": [
      "1h"
    ],
    "start_date": "2025-07-01",
    "end_date": "2025-08-31",
    "initial_capital": 10000.0
  },
  "results": [
    {
      "run_number": 1,
      "total_return": -1.0,
      "final_value": 0.0,
      "total_trades": 0,
      "sharpe_ratio": 0,
      "max_drawdown": NaN,
      "win_rate": 0,
      "data_records": 4353
    },
    {
      "run_number": 2,
      "total_return": -1.0,
      "final_value": 0.0,
      "total_trades": 0,
      "sharpe_ratio": 0,
      "max_drawdown": NaN,
      "win_rate": 0,
      "data_records": 4353
    },
    {
      "run_number": 3,
      "total_return": -1.0,
      "final_value": 0.0,
      "total_trades": 0,
      "sharpe_ratio": 0,
      "max_drawdown": NaN,
      "win_rate": 0,
      "data_records": 4353
    },
    {
      "run_number": 4,
      "total_return": -1.0,
      "final_value": 0.0,
      "total_trades": 0,
      "sharpe_ratio": 0,
      "max_drawdown": NaN,
      "win_rate": 0,
      "data_records": 4353
    },
    {
      "run_number": 5,
      "total_return": -1.0,
      "final_value": 0.0,
      "total_trades": 0,
      "sharpe_ratio": 0,
      "max_drawdown": NaN,
      "win_rate": 0,
      "data_records": 4353
    }
  ],
  "is_consistent": true,
  "test_time": "2025-09-14T14:03:12.040481"
}